---
name: macOS Desktop with noVNC (VNC Fixed) Sonet son
on:
  workflow_dispatch:
    inputs:
      vnc_password:
        description: VNC Password
        required: false
        default: github2024
        type: string
      session_password:
        description: Web Terminal Password
        required: false
        default: github2024
        type: string
jobs:
  macos-desktop:
    runs-on: macos-latest
    timeout-minutes: 360
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get System Info
        run: >
          PUBLIC_IP=$(curl -s https://ipinfo.io/ip)

          echo "üåê Public IP: $PUBLIC_IP"

          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV


          echo "üñ•Ô∏è  System: macOS $(sw_vers -productVersion) ($(uname -m))"

          echo "üíæ RAM: $(sysctl -n hw.memsize | awk '{print $1/1024/1024/1024 " GB"}') | CPU: $(sysctl -n hw.ncpu) cores"
      - name: Install Basic Tools
        run: |
          echo "üì¶ Installing basic tools..."
          brew install node
          npm install -g localtunnel
          echo "‚úÖ Basic tools installed"
      - name: Setup Python Virtual Environment
        run: >
          echo "üêç Setting up Python virtual environment..."


          # Create virtual environment to avoid externally-managed-environment error

          python3 -m venv /tmp/venv

          source /tmp/venv/bin/activate


          # Install websockify in virtual environment

          pip install websockify


          # Make websockify globally accessible

          ln -sf /tmp/venv/bin/websockify /usr/local/bin/websockify || true


          echo "‚úÖ Python environment setup complete"
      - name: Setup VNC Server (Initial)
        run: >
          echo "üîß Setting up VNC server..."


          # Enable macOS built-in VNC server

          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate -configure -access -on \
            -clientopts -setvnclegacy -vnclegacy yes \
            -clientopts -setvncpw -vncpw ${{ github.event.inputs.vnc_password }} \
            -restart -agent -privs -all

          echo "‚úÖ VNC server initial setup complete"
      - name: Fix VNC Authentication Issues
        run: >
          echo "üîß Fixing VNC authentication..."


          # Stop current VNC server

          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -stop


          # Reconfigure VNC with proper settings

          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate -configure -access -on \
            -configure -allowAccessFor -allUsers \
            -configure -restart -agent \
            -clientopts -setvnclegacy -vnclegacy yes \
            -clientopts -setvncpw -vncpw ${{ github.event.inputs.vnc_password }}

          # Enable VNC without username requirement

          sudo defaults write /Library/Preferences/com.apple.RemoteDesktop.plist VNCLegacyConnectionsEnabled -bool true

          sudo defaults write /Library/Preferences/com.apple.VNCSettings.txt Password -string ${{ github.event.inputs.vnc_password }}


          # Restart VNC service

          sudo launchctl unload /System/Library/LaunchDaemons/com.apple.screensharing.plist 2>/dev/null || true

          sudo launchctl load /System/Library/LaunchDaemons/com.apple.screensharing.plist


          echo "‚úÖ VNC authentication fixed - password only mode enabled"
      - name: Install noVNC Components
        run: |
          echo "üåê Installing noVNC..."

          # Clone noVNC
          git clone https://github.com/novnc/noVNC.git /tmp/noVNC

          # Clone websockify source as backup
          git clone https://github.com/novnc/websockify.git /tmp/websockify

          # Try Homebrew websockify alternative
          brew install websocketd || true

          echo "‚úÖ noVNC components installed"
      - name: Install Desktop Applications
        run: |
          echo "üì± Installing applications..."

          # Install GUI applications (continue on failure)
          brew install --cask firefox || echo "Firefox install failed"
          brew install --cask visual-studio-code || echo "VSCode install failed"
          brew install --cask sublime-text || echo "Sublime install failed"

          # Install CLI tools
          brew install htop neofetch git ttyd

          echo "‚úÖ Applications installed"
      - name: Start noVNC with Multiple Methods
        run: >
          echo "üåê Starting noVNC web interface..."


          # Method 1: Try with virtual environment websockify

          if [ -f /tmp/venv/bin/websockify ]; then
              echo "üîÑ Starting websockify from virtual environment..."
              source /tmp/venv/bin/activate
              /tmp/venv/bin/websockify --web /tmp/noVNC 6080 localhost:5900 > /tmp/websockify.log 2>&1 &
              sleep 5
          fi


          # Method 2: Try with websockify source

          if ! pgrep -f websockify > /dev/null; then
              echo "üîÑ Starting websockify from source..."
              cd /tmp/websockify
              python3 websockify.py --web /tmp/noVNC 6080 localhost:5900 > /tmp/websockify.log 2>&1 &
              sleep 5
          fi


          # Method 3: Simple HTTP server + manual VNC (fallback)

          if ! pgrep -f websockify > /dev/null; then
              echo "üîÑ Starting simple HTTP server as fallback..."
              cd /tmp/noVNC
              python3 -m http.server 6080 > /tmp/http.log 2>&1 &
              sleep 3
          fi


          if pgrep -f "websockify\|http.server" > /dev/null; then
              echo "‚úÖ Web interface started on port 6080"
          else
              echo "‚ö†Ô∏è  Web interface startup failed"
          fi
      - name: Create Enhanced Web Interface
        run: >
          echo "üé® Creating enhanced web interface..."


          cat > /tmp/noVNC/index.html << 'HTMLEOF'

          <!DOCTYPE html>

          <html>

          <head>
              <title>üçé macOS Desktop - GitHub Actions</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, sans-serif;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white; 
                      min-height: 100vh;
                      padding: 20px;
                  }
                  .container { max-width: 1400px; margin: 0 auto; }
                  .header {
                      text-align: center;
                      background: rgba(255,255,255,0.15);
                      padding: 30px;
                      border-radius: 20px;
                      margin-bottom: 30px;
                      backdrop-filter: blur(10px);
                  }
                  .controls {
                      display: flex;
                      justify-content: center;
                      gap: 15px;
                      margin: 20px 0;
                      flex-wrap: wrap;
                  }
                  .btn {
                      padding: 15px 30px;
                      border: none;
                      border-radius: 12px;
                      font-weight: 600;
                      text-decoration: none;
                      display: inline-block;
                      transition: all 0.3s ease;
                      cursor: pointer;
                      font-size: 16px;
                  }
                  .btn-primary { background: #007AFF; color: white; }
                  .btn-primary:hover { background: #0056CC; transform: translateY(-2px); }
                  .btn-success { background: #34C759; color: white; }
                  .btn-success:hover { background: #28A745; transform: translateY(-2px); }
                  .btn-warning { background: #FF9500; color: white; }
                  .btn-warning:hover { background: #E6850E; transform: translateY(-2px); }
                  
                  .desktop-viewer {
                      background: rgba(0,0,0,0.2);
                      border-radius: 15px;
                      padding: 20px;
                      margin: 20px 0;
                  }
                  .vnc-frame {
                      width: 100%;
                      height: 70vh;
                      min-height: 600px;
                      border: none;
                      border-radius: 10px;
                      background: #000;
                  }
                  .info-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                      gap: 20px;
                      margin: 20px 0;
                  }
                  .info-card {
                      background: rgba(255,255,255,0.1);
                      padding: 25px;
                      border-radius: 15px;
                      backdrop-filter: blur(5px);
                      border: 1px solid rgba(255,255,255,0.2);
                  }
                  .status { 
                      display: inline-block;
                      width: 12px;
                      height: 12px;
                      border-radius: 50%;
                      background: #34C759;
                      margin-right: 8px;
                      animation: pulse 2s infinite;
                  }
                  @keyframes pulse {
                      0%, 100% { opacity: 1; }
                      50% { opacity: 0.5; }
                  }
                  .connection-info {
                      background: rgba(52, 199, 89, 0.2);
                      padding: 15px;
                      border-radius: 10px;
                      margin: 15px 0;
                      border-left: 4px solid #34C759;
                  }
                  .auth-info {
                      background: rgba(255, 159, 10, 0.2);
                      padding: 15px;
                      border-radius: 10px;
                      margin: 15px 0;
                      border-left: 4px solid #FF9F0A;
                  }
              </style>
          </head>

          <body>
              <div class="container">
                  <div class="header">
                      <h1>üçé macOS Desktop Environment</h1>
                      <p>GitHub Actions Remote Desktop with noVNC</p>
                      <div class="connection-info">
                          <span class="status"></span>
                          <strong>VNC Password:</strong> VNC_PASSWORD_PLACEHOLDER
                      </div>
                      <div class="auth-info">
                          <strong>üîê Authentication:</strong> Password-only mode (no username required)
                      </div>
                  </div>
                  
                  <div class="controls">
                      <button class="btn btn-primary" onclick="connectVNC()">üñ•Ô∏è Connect Desktop</button>
                      <a href="/vnc.html?autoconnect=true&resize=scale" class="btn btn-success" target="_blank">üöÄ Full Screen</a>
                      <a href="/terminal" class="btn btn-warning" target="_blank">üíª Terminal</a>
                      <button class="btn btn-primary" onclick="refreshVNC()">üîÑ Refresh</button>
                  </div>
                  
                  <div class="info-grid">
                      <div class="info-card">
                          <h3>üñ•Ô∏è Display Settings</h3>
                          <p><strong>Resolution:</strong> Native macOS</p>
                          <p><strong>VNC Port:</strong> 5900</p>
                          <p><strong>Web Port:</strong> 6080</p>
                          <p><strong>Protocol:</strong> RFB/VNC</p>
                      </div>
                      <div class="info-card">
                          <h3>üîê Connection Guide</h3>
                          <p><strong>Username:</strong> Leave blank or use 'admin'</p>
                          <p><strong>Password:</strong> VNC_PASSWORD_PLACEHOLDER</p>
                          <p><strong>Method:</strong> Password-only authentication</p>
                          <p><strong>Legacy VNC:</strong> Enabled</p>
                      </div>
                      <div class="info-card">
                          <h3>üì± Installed Apps</h3>
                          <p>üåê Firefox Browser</p>
                          <p>üíª Visual Studio Code</p>
                          <p>üìù Sublime Text</p>
                          <p>üñ•Ô∏è Terminal</p>
                          <p>üìÅ Finder</p>
                      </div>
                      <div class="info-card">
                          <h3>‚ö° System Specs</h3>
                          <p><strong>OS:</strong> macOS 14.7.6</p>
                          <p><strong>CPU:</strong> ARM64 (3 cores)</p>
                          <p><strong>RAM:</strong> 7 GB</p>
                          <p><strong>Storage:</strong> SSD</p>
                      </div>
                  </div>
                  
                  <div class="desktop-viewer">
                      <h3>üñ•Ô∏è Desktop Viewer</h3>
                      <p><strong>üí° Tip:</strong> If authentication fails, leave username blank and use only password</p>
                      <iframe id="vnc-frame" class="vnc-frame" src="about:blank"></iframe>
                  </div>
              </div>
              
              <script>
                  function connectVNC() {
                      const frame = document.getElementById('vnc-frame');
                      frame.src = '/vnc.html?autoconnect=true&resize=scale';
                  }
                  
                  function refreshVNC() {
                      const frame = document.getElementById('vnc-frame');
                      frame.src = frame.src;
                  }
                  
                  // Auto-connect after 3 seconds
                  setTimeout(connectVNC, 3000);
              </script>
          </body>

          </html>

          HTMLEOF


          # Replace password placeholder

          sed -i '' "s/VNC_PASSWORD_PLACEHOLDER/${{ github.event.inputs.vnc_password }}/g" /tmp/noVNC/index.html


          echo "‚úÖ Enhanced web interface created with auth guide"
      - name: Setup Web Terminal
        run: |
          echo "üíª Starting web terminal..."
          ttyd --port 8080 --writable /bin/bash > /tmp/ttyd.log 2>&1 &
          echo "‚úÖ Web terminal started on port 8080"
      - name: Setup Nginx Proxy
        run: |
          echo "üîÑ Setting up nginx reverse proxy..."
          brew install nginx

          cat > /tmp/nginx.conf << 'NGINXEOF'
          events { worker_connections 1024; }
          http {
              include /opt/homebrew/etc/nginx/mime.types;
              default_type application/octet-stream;
              
              server {
                  listen 8090;
                  
                  location / {
                      proxy_pass http://127.0.0.1:6080/;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection "upgrade";
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                  }
                  
                  location /websockify {
                      proxy_pass http://127.0.0.1:6080/websockify;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection "upgrade";
                  }
                  
                  location /terminal {
                      proxy_pass http://127.0.0.1:8080/;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection "upgrade";
                  }
              }
          }
          NGINXEOF

          nginx -c /tmp/nginx.conf > /tmp/nginx.log 2>&1 &
          echo "‚úÖ Nginx proxy started on port 8090"
      - name: Setup Public Access Tunnels
        run: >
          echo "üöÄ Setting up public access tunnels..."


          # Cloudflare tunnel

          brew install cloudflared

          cloudflared tunnel --url http://localhost:8090 > /tmp/cloudflare.log 2>&1 &

          sleep 25


          CF_URL=$(grep -o 'https://[^[:space:]]*\.trycloudflare\.com' /tmp/cloudflare.log | head -1)

          if [ ! -z "$CF_URL" ]; then
              echo "$CF_URL" > /tmp/cloudflare_url.txt
              echo "‚úÖ Cloudflare tunnel: $CF_URL"
          fi


          # Localtunnel backup

          npx localtunnel --port 8090 --subdomain macos-desktop-$(date +%s) > /tmp/localtunnel.log 2>&1 &

          sleep 15


          LT_URL=$(grep -o 'https://[^[:space:]]*' /tmp/localtunnel.log | head -1)

          if [ ! -z "$LT_URL" ]; then
              echo "$LT_URL" > /tmp/localtunnel_url.txt
              echo "‚úÖ Localtunnel: $LT_URL"
          fi
      - name: Display Complete Access Information
        run: >
          echo ""

          echo "üéâ macOS Desktop Environment is Ready!"

          echo "üñ•Ô∏è  Full graphical desktop + terminal access"

          echo ""

          echo "üìä Service Status Check:"

          echo "‚Ä¢ VNC Server: $(pgrep -f ARDAgent > /dev/null && echo '‚úÖ Running' || echo '‚ùå Not running')"

          echo "‚Ä¢ noVNC/HTTP: $(pgrep -f 'websockify\|http.server' > /dev/null && echo '‚úÖ Running' || echo '‚ùå Not running')"

          echo "‚Ä¢ Web Terminal: $(pgrep ttyd > /dev/null && echo '‚úÖ Running' || echo '‚ùå Not running')"

          echo "‚Ä¢ Nginx Proxy: $(pgrep nginx > /dev/null && echo '‚úÖ Running' || echo '‚ùå Not running')"

          echo ""

          echo "üîê VNC AUTHENTICATION INFO:"

          echo "‚Ä¢ Username: Leave BLANK or use 'admin'"

          echo "‚Ä¢ Password: ${{ github.event.inputs.vnc_password }}"

          echo "‚Ä¢ Mode: Password-only (no username required)"

          echo "‚Ä¢ Legacy VNC: Enabled for compatibility"

          echo ""

          echo "üåê PUBLIC ACCESS URLS:"

          echo "====================="


          if [ -f /tmp/cloudflare_url.txt ]; then
              CF_URL=$(cat /tmp/cloudflare_url.txt)
              echo "ü•á CLOUDFLARE TUNNEL (RECOMMENDED):"
              echo "   üñ•Ô∏è  Desktop: $CF_URL"
              echo "   üíª Terminal: $CF_URL/terminal"
              echo "   üîê VNC Password: ${{ github.event.inputs.vnc_password }}"
              echo ""
          fi


          if [ -f /tmp/localtunnel_url.txt ]; then
              LT_URL=$(cat /tmp/localtunnel_url.txt)
              echo "ü•à LOCALTUNNEL BACKUP:"
              echo "   üñ•Ô∏è  Desktop: $LT_URL"
              echo "   üíª Terminal: $LT_URL/terminal"
              echo "   üîë Tunnel Password: $PUBLIC_IP"
              echo "   üîê VNC Password: ${{ github.event.inputs.vnc_password }}"
              echo ""
          fi


          echo "üéÆ USAGE INSTRUCTIONS:"

          echo "‚Ä¢ Open desktop URL in web browser"

          echo "‚Ä¢ Click 'Connect Desktop' or 'Full Screen'"

          echo "‚Ä¢ When prompted for credentials:"

          echo "  - Username: LEAVE BLANK or type 'admin'"

          echo "  - Password: ${{ github.event.inputs.vnc_password }}"

          echo "‚Ä¢ Use mouse/keyboard normally"

          echo "‚Ä¢ Access applications from dock/launchpad"
      - name: Keep All Services Running
        run: >
          echo ""

          echo "‚è∞ Keeping desktop session alive for 6 hours..."

          echo "üîÑ Auto-monitoring and restarting services as needed"

          echo ""


          while true; do
              # Monitor and restart services
              if ! pgrep -f 'websockify\|http.server' > /dev/null; then
                  echo "üîÑ Restarting web interface..."
                  if [ -f /tmp/venv/bin/websockify ]; then
                      source /tmp/venv/bin/activate
                      /tmp/venv/bin/websockify --web /tmp/noVNC 6080 localhost:5900 > /tmp/websockify.log 2>&1 &
                  else
                      cd /tmp/websockify
                      python3 websockify.py --web /tmp/noVNC 6080 localhost:5900 > /tmp/websockify.log 2>&1 &
                  fi
              fi
              
              if ! pgrep ttyd > /dev/null; then
                  echo "üîÑ Restarting terminal..."
                  ttyd --port 8080 --writable /bin/bash > /tmp/ttyd.log 2>&1 &
              fi
              
              if ! pgrep nginx > /dev/null; then
                  echo "üîÑ Restarting proxy..."
                  nginx -c /tmp/nginx.conf > /tmp/nginx.log 2>&1 &
              fi
              
              echo "$(date): ‚úÖ Desktop services running | IP: $PUBLIC_IP"
              sleep 300
          done
