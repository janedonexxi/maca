---
name: macOS VNC Desktop (Complete Solution)
on:
  workflow_dispatch:
    inputs:
      vnc_password:
        description: VNC Password
        required: false
        default: github2024
        type: string
jobs:
  macos-desktop:
    runs-on: macos-latest
    timeout-minutes: 360
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: System Setup and Info
        run: >
          PUBLIC_IP=$(curl -s https://ipinfo.io/ip)

          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV


          echo "üñ•Ô∏è  System Information:"

          echo "macOS Version: $(sw_vers -productVersion)"

          echo "Architecture: $(uname -m)"

          echo "RAM: $(sysctl -n hw.memsize | awk '{print $1/1024/1024/1024 " GB"}')"

          echo "CPU Cores: $(sysctl -n hw.ncpu)"

          echo "Public IP: $PUBLIC_IP"
      - name: Install Essential Tools
        run: |
          echo "üì¶ Installing essential tools..."

          # Install basic packages
          brew install node python3 ttyd
          npm install -g localtunnel

          # Create Python virtual environment for websockify
          python3 -m venv /tmp/venv
          source /tmp/venv/bin/activate
          pip install websockify

          echo "‚úÖ Essential tools installed"
      - name: Install Desktop Applications
        run: |
          echo "üì± Installing desktop applications..."

          # Install GUI applications
          brew install --cask firefox || echo "Firefox install failed"
          brew install --cask visual-studio-code || echo "VSCode install failed"
          brew install --cask sublime-text || echo "Sublime install failed"

          # Install CLI tools
          brew install htop neofetch git tree

          echo "‚úÖ Desktop applications installed"
      - name: Create VNC User with Desktop Environment
        run: >
          echo "üë§ Creating VNC user with desktop environment..."


          # Create VNC user using macOS dscl

          sudo dscl . -create /Users/vncuser

          sudo dscl . -create /Users/vncuser UserShell /bin/bash

          sudo dscl . -create /Users/vncuser RealName "VNC Desktop User"

          sudo dscl . -create /Users/vncuser UniqueID 1001

          sudo dscl . -create /Users/vncuser PrimaryGroupID 20

          sudo dscl . -create /Users/vncuser NFSHomeDirectory /Users/vncuser


          # Set password using macOS method

          sudo dscl . -passwd /Users/vncuser ${{ github.event.inputs.vnc_password }}


          # Add to admin group for full desktop access

          sudo dscl . -append /Groups/admin GroupMembership vncuser


          # Make user visible (not hidden)

          sudo dscl . -create /Users/vncuser IsHidden 0


          # Create home directory with proper permissions

          sudo createhomedir -c -u vncuser

          sudo chown -R vncuser:staff /Users/vncuser


          # Set desktop picture

          sudo -u vncuser defaults write com.apple.desktop Background '{default = {ImageFilePath = "/System/Library/Desktop Pictures/Monterey.heic"; };}'


          # Verify user creation

          id vncuser && echo "‚úÖ VNC user created successfully"
      - name: Configure VNC Server with Desktop Session
        run: >
          echo "üîß Configuring VNC server with desktop session..."


          # Enable Remote Management for VNC user

          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate -configure -access -on \
            -configure -allowAccessFor -specifiedUsers \
            -configure -users vncuser \
            -configure -restart -agent \
            -privs -all

          # Configure VNC legacy connections

          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -configure -clientopts -setvnclegacy -vnclegacy yes \
            -configure -clientopts -setvncpw -vncpw ${{ github.event.inputs.vnc_password }}

          # Enable auto-login for vncuser to prevent black screen

          sudo defaults write /Library/Preferences/com.apple.loginwindow autoLoginUser vncuser


          # Start screen sharing service

          sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist


          echo "‚úÖ VNC server configured"
      - name: Start Desktop Session for VNC User
        run: >
          echo "üñºÔ∏è  Starting desktop session to prevent black screen..."


          # Create desktop startup script for vncuser

          sudo -u vncuser mkdir -p /Users/vncuser/Library/LaunchAgents


          cat > /tmp/desktop-startup.plist << 'PLISTEOF'

          <?xml version="1.0" encoding="UTF-8"?>

          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">

          <plist version="1.0">

          <dict>
              <key>Label</key>
              <string>com.vncuser.desktop</string>
              <key>ProgramArguments</key>
              <array>
                  <string>/bin/bash</string>
                  <string>-c</string>
                  <string>
                  export DISPLAY=:0;
                  export HOME=/Users/vncuser;
                  sleep 5;
                  /System/Library/CoreServices/Dock.app/Contents/MacOS/Dock &amp;
                  /System/Library/CoreServices/Finder.app/Contents/MacOS/Finder &amp;
                  /System/Library/CoreServices/SystemUIServer.app/Contents/MacOS/SystemUIServer &amp;
                  sleep 3;
                  open -a "System Preferences" &amp;
                  open -a "Firefox" &amp;
                  </string>
              </array>
              <key>RunAtLoad</key>
              <true/>
              <key>KeepAlive</key>
              <false/>
          </dict>

          </plist>

          PLISTEOF


          sudo cp /tmp/desktop-startup.plist /Users/vncuser/Library/LaunchAgents/

          sudo chown vncuser:staff /Users/vncuser/Library/LaunchAgents/desktop-startup.plist


          # Load the launch agent

          sudo -u vncuser launchctl load /Users/vncuser/Library/LaunchAgents/desktop-startup.plist


          # Also start desktop components immediately

          sudo -u vncuser bash << 'USEREOF'

          export DISPLAY=:0

          export HOME=/Users/vncuser


          # Start essential desktop components

          /System/Library/CoreServices/Dock.app/Contents/MacOS/Dock &

          /System/Library/CoreServices/Finder.app/Contents/MacOS/Finder &

          /System/Library/CoreServices/SystemUIServer.app/Contents/MacOS/SystemUIServer &


          # Open applications to populate desktop

          sleep 3

          open -a "System Preferences" &

          open -a "Firefox" &


          USEREOF


          echo "‚úÖ Desktop session started for VNC user"
      - name: Setup noVNC Web Interface
        run: >
          echo "üåê Setting up noVNC web interface..."


          # Clone noVNC and websockify

          git clone https://github.com/novnc/noVNC.git /tmp/noVNC

          git clone https://github.com/novnc/websockify.git /tmp/websockify


          # Wait for VNC server to be ready

          sleep 15


          # Start websockify with virtual environment

          source /tmp/venv/bin/activate


          # Check for VNC server and start websockify

          VNC_STARTED=false

          for port in 5900 5901 5902; do
              if netstat -an | grep ":$port.*LISTEN" > /dev/null; then
                  echo "üîÑ Found VNC server on port $port, starting websockify..."
                  websockify --web /tmp/noVNC 6080 localhost:$port > /tmp/websockify.log 2>&1 &
                  sleep 5
                  if pgrep -f websockify > /dev/null; then
                      echo "‚úÖ noVNC started successfully on VNC port $port"
                      VNC_STARTED=true
                      break
                  fi
              fi
          done


          # Force start websockify if no VNC detected

          if [ "$VNC_STARTED" = false ]; then
              echo "üîÑ Force starting websockify on port 5900..."
              websockify --web /tmp/noVNC 6080 localhost:5900 > /tmp/websockify.log 2>&1 &
          fi
      - name: Create Enhanced VNC Web Interface
        run: >
          echo "üé® Creating enhanced VNC web interface..."


          cat > /tmp/noVNC/index.html << 'HTMLEOF'

          <!DOCTYPE html>

          <html>

          <head>
              <title>üçé macOS VNC Desktop - GitHub Actions</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white; 
                      min-height: 100vh;
                      padding: 20px;
                  }
                  .container { max-width: 1200px; margin: 0 auto; }
                  .header {
                      text-align: center;
                      background: rgba(255,255,255,0.15);
                      padding: 30px;
                      border-radius: 20px;
                      margin-bottom: 30px;
                      backdrop-filter: blur(10px);
                  }
                  .auth-info {
                      background: rgba(52, 199, 89, 0.2);
                      padding: 20px;
                      border-radius: 15px;
                      margin: 20px 0;
                      border-left: 4px solid #34C759;
                  }
                  .controls {
                      display: flex;
                      justify-content: center;
                      gap: 15px;
                      margin: 20px 0;
                      flex-wrap: wrap;
                  }
                  .btn {
                      padding: 15px 30px;
                      border: none;
                      border-radius: 12px;
                      font-weight: 600;
                      text-decoration: none;
                      display: inline-block;
                      transition: all 0.3s ease;
                      cursor: pointer;
                      font-size: 16px;
                  }
                  .btn-primary { background: #007AFF; color: white; }
                  .btn-primary:hover { background: #0056CC; transform: translateY(-2px); }
                  .btn-success { background: #34C759; color: white; }
                  .btn-success:hover { background: #28A745; transform: translateY(-2px); }
                  .btn-warning { background: #FF9500; color: white; }
                  .btn-warning:hover { background: #E6850E; transform: translateY(-2px); }
                  
                  .desktop-viewer {
                      background: rgba(0,0,0,0.2);
                      border-radius: 15px;
                      padding: 20px;
                      margin: 20px 0;
                  }
                  .vnc-frame {
                      width: 100%;
                      height: 75vh;
                      min-height: 700px;
                      border: none;
                      border-radius: 10px;
                      background: #000;
                  }
                  .info-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                      gap: 20px;
                      margin: 20px 0;
                  }
                  .info-card {
                      background: rgba(255,255,255,0.1);
                      padding: 20px;
                      border-radius: 15px;
                      backdrop-filter: blur(5px);
                      border: 1px solid rgba(255,255,255,0.2);
                  }
                  .status-indicator {
                      display: inline-block;
                      width: 12px;
                      height: 12px;
                      border-radius: 50%;
                      background: #34C759;
                      margin-right: 8px;
                      animation: pulse 2s infinite;
                  }
                  @keyframes pulse {
                      0%, 100% { opacity: 1; }
                      50% { opacity: 0.5; }
                  }
              </style>
          </head>

          <body>
              <div class="container">
                  <div class="header">
                      <h1>üçé macOS VNC Desktop</h1>
                      <p>GitHub Actions Remote Desktop with Full GUI</p>
                      
                      <div class="auth-info">
                          <span class="status-indicator"></span>
                          <strong>VNC Authentication:</strong><br>
                          Username: <strong>vncuser</strong><br>
                          Password: <strong>VNC_PASS_PLACEHOLDER</strong><br>
                          <small>Desktop session automatically started to prevent black screen</small>
                      </div>
                  </div>
                  
                  <div class="controls">
                      <button class="btn btn-primary" onclick="connectVNC()">üñ•Ô∏è Connect Desktop</button>
                      <a href="/vnc.html?autoconnect=true&resize=scale" class="btn btn-success" target="_blank">üöÄ Full Screen VNC</a>
                      <a href="/terminal" class="btn btn-warning" target="_blank">üíª Web Terminal</a>
                      <button class="btn btn-primary" onclick="refreshVNC()">üîÑ Refresh Connection</button>
                  </div>
                  
                  <div class="info-grid">
                      <div class="info-card">
                          <h3>üîß Connection Guide</h3>
                          <p><strong>1.</strong> Click "Connect Desktop"</p>
                          <p><strong>2.</strong> Enter username: vncuser</p>
                          <p><strong>3.</strong> Enter password: VNC_PASS_PLACEHOLDER</p>
                          <p><strong>4.</strong> Wait for desktop to load</p>
                          <p><strong>5.</strong> Enjoy full macOS experience!</p>
                      </div>
                      <div class="info-card">
                          <h3>üì± Pre-installed Apps</h3>
                          <p>üåê Firefox Browser</p>
                          <p>üíª Visual Studio Code</p>
                          <p>üìù Sublime Text</p>
                          <p>üñ•Ô∏è Terminal</p>
                          <p>üìÅ Finder</p>
                          <p>‚öôÔ∏è System Preferences</p>
                      </div>
                      <div class="info-card">
                          <h3>‚ö° System Specifications</h3>
                          <p><strong>OS:</strong> macOS 14.7.6</p>
                          <p><strong>CPU:</strong> ARM64 (3 cores)</p>
                          <p><strong>RAM:</strong> 7 GB</p>
                          <p><strong>VNC Port:</strong> 5900</p>
                          <p><strong>Web Port:</strong> 6080</p>
                      </div>
                      <div class="info-card">
                          <h3>üí° Usage Tips</h3>
                          <p>‚Ä¢ Full mouse and keyboard support</p>
                          <p>‚Ä¢ Right-click for context menus</p>
                          <p>‚Ä¢ Cmd+Space for Spotlight search</p>
                          <p>‚Ä¢ Dock and menu bar fully functional</p>
                          <p>‚Ä¢ Applications launch normally</p>
                      </div>
                  </div>
                  
                  <div class="desktop-viewer">
                      <h3>üñ•Ô∏è macOS Desktop Viewer</h3>
                      <p>Your full macOS desktop environment with Dock, Finder, and all applications</p>
                      <iframe id="vnc-frame" class="vnc-frame" src="about:blank"></iframe>
                  </div>
              </div>
              
              <script>
                  function connectVNC() {
                      const frame = document.getElementById('vnc-frame');
                      frame.src = '/vnc.html?autoconnect=true&resize=scale';
                  }
                  
                  function refreshVNC() {
                      const frame = document.getElementById('vnc-frame');
                      frame.src = frame.src;
                  }
                  
                  // Auto-connect after 3 seconds
                  setTimeout(connectVNC, 3000);
              </script>
          </body>

          </html>

          HTMLEOF


          # Replace password placeholder

          sed -i '' "s/VNC_PASS_PLACEHOLDER/${{ github.event.inputs.vnc_password }}/g" /tmp/noVNC/index.html


          echo "‚úÖ Enhanced VNC web interface created"
      - name: Setup Web Terminal
        run: |
          echo "üíª Setting up web terminal..."
          ttyd --port 8080 --writable /bin/bash > /tmp/ttyd.log 2>&1 &
          echo "‚úÖ Web terminal started on port 8080"
      - name: Setup Nginx Reverse Proxy
        run: |
          echo "üîÑ Setting up nginx reverse proxy..."
          brew install nginx

          cat > /tmp/nginx.conf << 'NGINXEOF'
          events { worker_connections 1024; }
          http {
              include /opt/homebrew/etc/nginx/mime.types;
              default_type application/octet-stream;
              
              server {
                  listen 8090;
                  
                  location / {
                      proxy_pass http://127.0.0.1:6080/;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection "upgrade";
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                  }
                  
                  location /websockify {
                      proxy_pass http://127.0.0.1:6080/websockify;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection "upgrade";
                  }
                  
                  location /terminal {
                      proxy_pass http://127.0.0.1:8080/;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection "upgrade";
                  }
              }
          }
          NGINXEOF

          nginx -c /tmp/nginx.conf > /tmp/nginx.log 2>&1 &
          echo "‚úÖ Nginx reverse proxy started on port 8090"
      - name: Setup Public Access Tunnels
        run: >
          echo "üöÄ Setting up public access tunnels..."


          # Cloudflare tunnel (primary)

          brew install cloudflared

          cloudflared tunnel --url http://localhost:8090 > /tmp/cloudflare.log 2>&1 &

          sleep 25


          CF_URL=$(grep -o 'https://[^[:space:]]*\.trycloudflare\.com' /tmp/cloudflare.log | head -1)

          if [ ! -z "$CF_URL" ]; then
              echo "$CF_URL" > /tmp/cloudflare_url.txt
              echo "‚úÖ Cloudflare tunnel active: $CF_URL"
          fi


          # Localtunnel (backup)

          npx localtunnel --port 8090 --subdomain macos-vnc-desktop-$(date +%s) > /tmp/localtunnel.log 2>&1 &

          sleep 15


          LT_URL=$(grep -o 'https://[^[:space:]]*' /tmp/localtunnel.log | head -1)

          if [ ! -z "$LT_URL" ]; then
              echo "$LT_URL" > /tmp/localtunnel_url.txt
              echo "‚úÖ Localtunnel active: $LT_URL"
          fi
      - name: System Status and Access Information
        run: >
          echo ""

          echo "üéâ macOS VNC Desktop Environment is Ready!"

          echo "üñ•Ô∏è  Full graphical desktop with applications and desktop session"

          echo ""

          echo "üìä Service Status:"

          echo "‚Ä¢ VNC Server: $(pgrep -f ARDAgent > /dev/null && echo '‚úÖ Running' || echo '‚ùå Not running')"

          echo "‚Ä¢ Desktop Session: $(pgrep -f 'Dock\|Finder' > /dev/null && echo '‚úÖ Active' || echo '‚ùå Not active')"

          echo "‚Ä¢ noVNC Web: $(pgrep -f websockify > /dev/null && echo '‚úÖ Running' || echo '‚ùå Not running')"

          echo "‚Ä¢ Web Terminal: $(pgrep ttyd > /dev/null && echo '‚úÖ Running' || echo '‚ùå Not running')"

          echo "‚Ä¢ Nginx Proxy: $(pgrep nginx > /dev/null && echo '‚úÖ Running' || echo '‚ùå Not running')"

          echo ""

          echo "üîê VNC Authentication:"

          echo "‚Ä¢ Username: vncuser"

          echo "‚Ä¢ Password: ${{ github.event.inputs.vnc_password }}"

          echo "‚Ä¢ Desktop Session: Auto-started (no black screen)"

          echo ""

          echo "üåê Public Access URLs:"

          echo "====================="


          if [ -f /tmp/cloudflare_url.txt ]; then
              CF_URL=$(cat /tmp/cloudflare_url.txt)
              echo "ü•á CLOUDFLARE TUNNEL (RECOMMENDED):"
              echo "   üñ•Ô∏è  Desktop: $CF_URL"
              echo "   üíª Terminal: $CF_URL/terminal"
              echo ""
          fi


          if [ -f /tmp/localtunnel_url.txt ]; then
              LT_URL=$(cat /tmp/localtunnel_url.txt)
              echo "ü•à LOCALTUNNEL BACKUP:"
              echo "   üñ•Ô∏è  Desktop: $LT_URL"
              echo "   üíª Terminal: $LT_URL/terminal"
              echo "   üîë Tunnel Password: $PUBLIC_IP"
              echo ""
          fi


          echo "üéÆ Usage Instructions:"

          echo "‚Ä¢ Open desktop URL in web browser"

          echo "‚Ä¢ Click 'Connect Desktop' button"

          echo "‚Ä¢ Enter username: vncuser"

          echo "‚Ä¢ Enter password: ${{ github.event.inputs.vnc_password }}"

          echo "‚Ä¢ Enjoy full macOS desktop with Dock, Finder, and applications!"

          echo ""

          echo "üì± Available Applications:"

          echo "‚Ä¢ Firefox, VS Code, Sublime Text"

          echo "‚Ä¢ Terminal, System Preferences"

          echo "‚Ä¢ Finder, Dock, Menu Bar"

          echo "‚Ä¢ All standard macOS applications"
      - name: Keep Desktop Session Alive
        run: >
          echo ""

          echo "‚è∞ Keeping macOS desktop session alive for 6 hours..."

          echo "üîÑ Auto-monitoring and restarting services as needed"

          echo ""


          while true; do
              # Monitor and restart VNC desktop session
              if ! pgrep -f 'Dock' > /dev/null; then
                  echo "üîÑ Restarting desktop session..."
                  sudo -u vncuser bash -c '
                  export DISPLAY=:0
                  export HOME=/Users/vncuser
                  /System/Library/CoreServices/Dock.app/Contents/MacOS/Dock &
                  /System/Library/CoreServices/Finder.app/Contents/MacOS/Finder &
                  /System/Library/CoreServices/SystemUIServer.app/Contents/MacOS/SystemUIServer &
                  '
              fi
              
              # Monitor websockify
              if ! pgrep -f websockify > /dev/null; then
                  echo "üîÑ Restarting noVNC..."
                  source /tmp/venv/bin/activate
                  websockify --web /tmp/noVNC 6080 localhost:5900 > /tmp/websockify.log 2>&1 &
              fi
              
              # Monitor web terminal
              if ! pgrep ttyd > /dev/null; then
                  echo "üîÑ Restarting web terminal..."
                  ttyd --port 8080 --writable /bin/bash > /tmp/ttyd.log 2>&1 &
              fi
              
              # Monitor nginx
              if ! pgrep nginx > /dev/null; then
                  echo "üîÑ Restarting nginx proxy..."
                  nginx -c /tmp/nginx.conf > /tmp/nginx.log 2>&1 &
              fi
              
              echo "$(date): ‚úÖ macOS desktop services running | IP: $PUBLIC_IP"
              sleep 300
          done
