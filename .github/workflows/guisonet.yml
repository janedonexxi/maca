---
name: macOS Desktop Alternative VNC (Fixed)ssss
on:
  workflow_dispatch:
    inputs:
      vnc_password:
        description: VNC Password
        required: false
        default: github2024
        type: string
jobs:
  macos-desktop:
    runs-on: macos-latest
    timeout-minutes: 360
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: System Setup
        run: |
          PUBLIC_IP=$(curl -s https://ipinfo.io/ip)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "üñ•Ô∏è  macOS $(sw_vers -productVersion) ready"
      - name: Install Desktop Environment
        run: |
          echo "üì¶ Installing desktop components..."

          # Install basic tools
          brew install node python3
          npm install -g localtunnel

          # Create Python virtual environment
          python3 -m venv /tmp/venv
          source /tmp/venv/bin/activate
          pip install websockify

          # Install GUI applications
          brew install --cask firefox || true
          brew install --cask visual-studio-code || true

          echo "‚úÖ Desktop environment ready"
      - name: Create VNC User (macOS Method)
        run: >
          echo "üë§ Creating VNC user for macOS..."


          # Create VNC user using macOS dscl commands

          sudo dscl . -create /Users/vncuser

          sudo dscl . -create /Users/vncuser UserShell /bin/bash

          sudo dscl . -create /Users/vncuser RealName "VNC User"

          sudo dscl . -create /Users/vncuser UniqueID 1001

          sudo dscl . -create /Users/vncuser PrimaryGroupID 20

          sudo dscl . -create /Users/vncuser NFSHomeDirectory /Users/vncuser


          # Set password using macOS method (dscl passwd)

          sudo dscl . -passwd /Users/vncuser ${{ github.event.inputs.vnc_password }}


          # Add to admin group

          sudo dscl . -append /Groups/admin GroupMembership vncuser


          # Create home directory

          sudo createhomedir -c -u vncuser

          sudo chown -R vncuser:staff /Users/vncuser


          # Verify user creation

          id vncuser && echo "‚úÖ VNC user 'vncuser' created successfully"
      - name: Setup VNC Server with User Authentication
        run: >
          echo "üîß Setting up VNC server..."


          # Enable Remote Management for all users

          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate -configure -access -on \
            -configure -allowAccessFor -allUsers \
            -configure -restart -agent \
            -privs -all

          # Configure VNC settings

          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -configure -clientopts -setvnclegacy -vnclegacy yes \
            -configure -clientopts -setvncpw -vncpw ${{ github.event.inputs.vnc_password }}

          # Enable screen sharing

          sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist


          # Wait for VNC server to start

          sleep 10


          echo "‚úÖ VNC server configured"
      - name: Alternative VNC Setup (TigerVNC)
        run: >
          echo "üêÖ Setting up TigerVNC as alternative..."


          # Install TigerVNC

          brew install tiger-vnc || brew install --cask tiger-vnc || true


          # Create VNC password file

          mkdir -p ~/.vnc

          echo "${{ github.event.inputs.vnc_password }}" | vncpasswd -f > ~/.vnc/passwd 2>/dev/null || true

          chmod 600 ~/.vnc/passwd 2>/dev/null || true


          # Try to start TigerVNC server

          vncserver :1 -geometry 1920x1080 -depth 24 2>/dev/null || echo "TigerVNC not available"


          echo "‚úÖ Alternative VNC setup attempted"
      - name: Setup noVNC Web Interface
        run: >
          echo "üåê Setting up noVNC..."


          # Clone noVNC and websockify

          git clone https://github.com/novnc/noVNC.git /tmp/noVNC

          git clone https://github.com/novnc/websockify.git /tmp/websockify


          # Start websockify with virtual environment

          source /tmp/venv/bin/activate


          # Try multiple VNC ports

          VNC_STARTED=false

          for port in 5900 5901 5902; do
              if netstat -an | grep ":$port.*LISTEN" > /dev/null; then
                  echo "üîÑ Found VNC server on port $port, starting websockify..."
                  websockify --web /tmp/noVNC 6080 localhost:$port > /tmp/websockify.log 2>&1 &
                  sleep 5
                  if pgrep -f websockify > /dev/null; then
                      echo "‚úÖ noVNC started successfully on VNC port $port"
                      VNC_STARTED=true
                      break
                  fi
              fi
          done


          # Force start websockify even if no VNC detected

          if [ "$VNC_STARTED" = false ]; then
              echo "üîÑ Force starting websockify on port 5900..."
              websockify --web /tmp/noVNC 6080 localhost:5900 > /tmp/websockify.log 2>&1 &
          fi
      - name: Create Simple VNC Interface
        run: >
          echo "üé® Creating VNC interface..."


          cat > /tmp/noVNC/index.html << 'HTMLEOF'

          <!DOCTYPE html>

          <html>

          <head>
              <title>üçé macOS VNC Desktop</title>
              <meta charset="utf-8">
              <style>
                  body { 
                      font-family: -apple-system, sans-serif;
                      background: linear-gradient(135deg, #667eea, #764ba2);
                      color: white; 
                      padding: 20px;
                      margin: 0;
                  }
                  .container { max-width: 1000px; margin: 0 auto; text-align: center; }
                  .header {
                      background: rgba(255,255,255,0.1);
                      padding: 30px;
                      border-radius: 15px;
                      margin-bottom: 30px;
                  }
                  .auth-box {
                      background: rgba(52, 199, 89, 0.2);
                      padding: 20px;
                      border-radius: 10px;
                      margin: 20px 0;
                      border-left: 4px solid #34C759;
                  }
                  .btn {
                      display: inline-block;
                      padding: 15px 30px;
                      background: #007AFF;
                      color: white;
                      text-decoration: none;
                      border-radius: 10px;
                      margin: 10px;
                      font-weight: bold;
                      transition: all 0.3s;
                  }
                  .btn:hover { background: #0056CC; transform: translateY(-2px); }
                  .btn-success { background: #34C759; }
                  .btn-warning { background: #FF9500; }
                  .vnc-frame {
                      width: 100%;
                      height: 70vh;
                      border: none;
                      border-radius: 10px;
                      background: black;
                      margin: 20px 0;
                  }
                  .info-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                      gap: 20px;
                      margin: 20px 0;
                      text-align: left;
                  }
                  .info-card {
                      background: rgba(255,255,255,0.1);
                      padding: 20px;
                      border-radius: 10px;
                  }
              </style>
          </head>

          <body>
              <div class="container">
                  <div class="header">
                      <h1>üçé macOS VNC Desktop</h1>
                      <p>GitHub Actions Remote Desktop</p>
                      
                      <div class="auth-box">
                          <h3>üîê VNC Authentication Options</h3>
                          <p><strong>Method 1:</strong> Username: vncuser | Password: VNC_PASS_PLACEHOLDER</p>
                          <p><strong>Method 2:</strong> Username: (blank) | Password: VNC_PASS_PLACEHOLDER</p>
                          <p><strong>Method 3:</strong> Username: runner | Password: VNC_PASS_PLACEHOLDER</p>
                      </div>
                  </div>
                  
                  <div>
                      <button class="btn" onclick="connectVNC()">üñ•Ô∏è Connect Desktop</button>
                      <a href="/vnc.html?autoconnect=true&resize=scale" class="btn btn-success" target="_blank">üöÄ Full Screen</a>
                      <a href="/terminal" class="btn btn-warning" target="_blank">üíª Terminal</a>
                  </div>
                  
                  <div class="info-grid">
                      <div class="info-card">
                          <h3>üîß Connection Guide</h3>
                          <p>1. Click "Connect Desktop"</p>
                          <p>2. Try different username/password combinations</p>
                          <p>3. If one fails, try the next method</p>
                          <p>4. Wait for desktop to load</p>
                      </div>
                      <div class="info-card">
                          <h3>üì± Available Apps</h3>
                          <p>üåê Firefox Browser</p>
                          <p>üíª Visual Studio Code</p>
                          <p>üñ•Ô∏è Terminal</p>
                          <p>üìÅ Finder</p>
                      </div>
                      <div class="info-card">
                          <h3>‚ö° System Info</h3>
                          <p>macOS 14.7.6 ARM64</p>
                          <p>7GB RAM, 3 CPU cores</p>
                          <p>VNC Port: 5900</p>
                      </div>
                      <div class="info-card">
                          <h3>üêõ Troubleshooting</h3>
                          <p>‚Ä¢ Try different auth methods</p>
                          <p>‚Ä¢ Check VNC server status</p>
                          <p>‚Ä¢ Use terminal for debugging</p>
                          <p>‚Ä¢ Refresh if connection fails</p>
                      </div>
                  </div>
                  
                  <iframe id="vnc-frame" class="vnc-frame" src="about:blank"></iframe>
              </div>
              
              <script>
                  function connectVNC() {
                      document.getElementById('vnc-frame').src = '/vnc.html?autoconnect=true&resize=scale';
                  }
                  setTimeout(connectVNC, 3000);
              </script>
          </body>

          </html>

          HTMLEOF


          sed -i '' "s/VNC_PASS_PLACEHOLDER/${{ github.event.inputs.vnc_password }}/g" /tmp/noVNC/index.html
      - name: Setup Web Terminal
        run: |
          brew install ttyd
          ttyd --port 8080 --writable /bin/bash &
      - name: Setup Nginx and Tunnels
        run: >
          # Setup nginx proxy

          brew install nginx


          cat > /tmp/nginx.conf << 'EOF'

          events { worker_connections 1024; }

          http {
              include /opt/homebrew/etc/nginx/mime.types;
              default_type application/octet-stream;
              server {
                  listen 8090;
                  location / {
                      proxy_pass http://127.0.0.1:6080/;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection "upgrade";
                  }
                  location /terminal {
                      proxy_pass http://127.0.0.1:8080/;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection "upgrade";
                  }
              }
          }

          EOF


          nginx -c /tmp/nginx.conf &


          # Setup Cloudflare tunnel

          brew install cloudflared

          cloudflared tunnel --url http://localhost:8090 > /tmp/cf.log 2>&1 &

          sleep 25


          CF_URL=$(grep -o 'https://[^[:space:]]*\.trycloudflare\.com' /tmp/cf.log | head -1)

          echo "$CF_URL" > /tmp/url.txt
      - name: Debug and Display Access Info
        run: >
          echo ""

          echo "üîç VNC SERVER DEBUG:"

          echo "==================="


          # Check VNC processes

          echo "VNC Processes:"

          ps aux | grep -E "(vnc|VNC|ARD)" | grep -v grep || echo "No VNC processes"


          # Check ports

          echo "VNC Ports:"

          netstat -an | grep LISTEN | grep 590 || echo "No VNC ports"


          # Check users

          echo "VNC User:"

          id vncuser 2>/dev/null || echo "VNC user not found"


          # Check websockify

          echo "Websockify:"

          pgrep -f websockify && echo "‚úÖ Running" || echo "‚ùå Not running"


          echo ""

          echo "üéâ macOS VNC Desktop Ready!"

          echo "=========================="


          if [ -f /tmp/url.txt ]; then
              URL=$(cat /tmp/url.txt)
              echo "üåê Access URL: $URL"
              echo ""
              echo "üîê Try these authentication methods:"
              echo "1. Username: vncuser | Password: ${{ github.event.inputs.vnc_password }}"
              echo "2. Username: (blank) | Password: ${{ github.event.inputs.vnc_password }}"
              echo "3. Username: runner | Password: ${{ github.event.inputs.vnc_password }}"
          fi
      - name: Keep Services Running
        run: >
          echo "‚è∞ Keeping services alive..."


          while true; do
              # Monitor services
              if ! pgrep -f websockify > /dev/null; then
                  source /tmp/venv/bin/activate
                  websockify --web /tmp/noVNC 6080 localhost:5900 > /tmp/websockify.log 2>&1 &
              fi
              
              if ! pgrep ttyd > /dev/null; then
                  ttyd --port 8080 --writable /bin/bash &
              fi
              
              if ! pgrep nginx > /dev/null; then
                  nginx -c /tmp/nginx.conf &
              fi
              
              echo "$(date): ‚úÖ Services running"
              sleep 300
          done
