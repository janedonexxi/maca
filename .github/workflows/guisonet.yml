name: macOS Desktop Alternative VNC sonnet
on:
  workflow_dispatch:
    inputs:
      vnc_password:
        description: VNC Password
        required: false
        default: github2024
        type: string
jobs:
  macos-desktop:
    runs-on: macos-latest
    timeout-minutes: 360
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: System Setup
        run: |
          PUBLIC_IP=$(curl -s https://ipinfo.io/ip)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "üñ•Ô∏è  macOS $(sw_vers -productVersion) ready"
      - name: Install Desktop Environment
        run: |
          echo "üì¶ Installing desktop components..."

          # Install basic tools
          brew install node python3
          npm install -g localtunnel

          # Create Python virtual environment
          python3 -m venv /tmp/venv
          source /tmp/venv/bin/activate
          pip install websockify

          # Install GUI applications
          brew install --cask firefox || true
          brew install --cask visual-studio-code || true

          echo "‚úÖ Desktop environment ready"
      - name: Create VNC User for Authentication
        run: |
          echo "üë§ Creating VNC user for proper authentication..."

          # Create a dedicated VNC user (based on GitHub research)
          sudo dscl . -create /Users/vncuser
          sudo dscl . -create /Users/vncuser UserShell /bin/bash
          sudo dscl . -create /Users/vncuser RealName "VNC User"
          sudo dscl . -create /Users/vncuser UniqueID 1001
          sudo dscl . -create /Users/vncuser PrimaryGroupID 20
          sudo dscl . -create /Users/vncuser NFSHomeDirectory /Users/vncuser

          # Set password for VNC user
          echo "vncuser:${{ github.event.inputs.vnc_password }}" | sudo chpasswd

          # Add to admin group
          sudo dscl . -append /Groups/admin GroupMembership vncuser

          # Create home directory
          sudo createhomedir -c -u vncuser
          sudo chown -R vncuser:staff /Users/vncuser

          echo "‚úÖ VNC user 'vncuser' created with password"
      - name: Setup VNC Server with User Authentication
        run: >
          echo "üîß Setting up VNC server with user authentication..."


          # Enable Remote Management for the VNC user

          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate -configure -access -on \
            -configure -allowAccessFor -specifiedUsers \
            -configure -users vncuser \
            -configure -restart -agent \
            -privs -all

          # Enable VNC legacy connections

          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -configure -clientopts -setvnclegacy -vnclegacy yes \
            -configure -clientopts -setvncpw -vncpw ${{ github.event.inputs.vnc_password }}

          # Set system-wide VNC settings

          sudo defaults write /Library/Preferences/com.apple.VNCSettings.txt VNCEnabled -int 1

          sudo defaults write /Library/Preferences/com.apple.VNCSettings.txt Password -string "${{ github.event.inputs.vnc_password }}"


          # Start screen sharing service

          sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist


          echo "‚úÖ VNC server configured with user authentication"
      - name: Setup noVNC with Fixed Configuration
        run: >
          echo "üåê Setting up noVNC..."


          # Clone noVNC and websockify

          git clone https://github.com/novnc/noVNC.git /tmp/noVNC

          git clone https://github.com/novnc/websockify.git /tmp/websockify


          # Start websockify with virtual environment

          source /tmp/venv/bin/activate


          # Wait for VNC server to be ready

          sleep 10


          # Try different VNC ports

          for port in 5900 5901 5902; do
              if netstat -an | grep ":$port.*LISTEN" > /dev/null; then
                  echo "üîÑ Starting websockify for VNC port $port"
                  websockify --web /tmp/noVNC 6080 localhost:$port > /tmp/websockify.log 2>&1 &
                  sleep 5
                  if pgrep -f websockify > /dev/null; then
                      echo "‚úÖ noVNC started successfully on VNC port $port"
                      echo "$port" > /tmp/vnc_port.txt
                      break
                  fi
              fi
          done


          # Fallback: Force start websockify on port 5900

          if ! pgrep -f websockify > /dev/null; then
              echo "üîÑ Force starting websockify on port 5900..."
              websockify --web /tmp/noVNC 6080 localhost:5900 > /tmp/websockify.log 2>&1 &
          fi
      - name: Create Enhanced VNC Interface
        run: >
          echo "üé® Creating enhanced VNC interface..."


          cat > /tmp/noVNC/index.html << 'HTMLEOF'

          <!DOCTYPE html>

          <html>

          <head>
              <title>üçé macOS VNC Desktop</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, sans-serif;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white; 
                      min-height: 100vh;
                      padding: 20px;
                  }
                  .container { max-width: 1200px; margin: 0 auto; }
                  .header {
                      text-align: center;
                      background: rgba(255,255,255,0.1);
                      padding: 30px;
                      border-radius: 15px;
                      margin-bottom: 30px;
                      backdrop-filter: blur(10px);
                  }
                  .auth-info {
                      background: rgba(52, 199, 89, 0.2);
                      padding: 20px;
                      border-radius: 10px;
                      margin: 20px 0;
                      border-left: 4px solid #34C759;
                  }
                  .controls {
                      display: flex;
                      justify-content: center;
                      gap: 15px;
                      margin: 20px 0;
                      flex-wrap: wrap;
                  }
                  .btn {
                      padding: 15px 30px;
                      background: #007AFF;
                      color: white;
                      text-decoration: none;
                      border-radius: 10px;
                      font-weight: 600;
                      transition: all 0.3s ease;
                      display: inline-block;
                  }
                  .btn:hover { background: #0056CC; transform: translateY(-2px); }
                  .btn-success { background: #34C759; }
                  .btn-success:hover { background: #28A745; }
                  .btn-warning { background: #FF9500; }
                  .btn-warning:hover { background: #E6850E; }
                  
                  .desktop-viewer {
                      background: rgba(0,0,0,0.2);
                      border-radius: 15px;
                      padding: 20px;
                      margin: 20px 0;
                  }
                  .vnc-frame {
                      width: 100%;
                      height: 70vh;
                      min-height: 600px;
                      border: none;
                      border-radius: 10px;
                      background: #000;
                  }
                  .info-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                      gap: 20px;
                      margin: 20px 0;
                  }
                  .info-card {
                      background: rgba(255,255,255,0.1);
                      padding: 20px;
                      border-radius: 10px;
                      backdrop-filter: blur(5px);
                  }
              </style>
          </head>

          <body>
              <div class="container">
                  <div class="header">
                      <h1>üçé macOS VNC Desktop</h1>
                      <p>GitHub Actions Remote Desktop with User Authentication</p>
                      
                      <div class="auth-info">
                          <h3>üîê VNC Authentication</h3>
                          <p><strong>Username:</strong> vncuser</p>
                          <p><strong>Password:</strong> VNC_PASS_PLACEHOLDER</p>
                          <p><strong>Method:</strong> User-based authentication (not password-only)</p>
                      </div>
                  </div>
                  
                  <div class="controls">
                      <button class="btn" onclick="connectVNC()">üñ•Ô∏è Connect Desktop</button>
                      <a href="/vnc.html?autoconnect=true&resize=scale" class="btn btn-success" target="_blank">üöÄ Full Screen</a>
                      <a href="/terminal" class="btn btn-warning" target="_blank">üíª Terminal</a>
                      <button class="btn" onclick="refreshVNC()">üîÑ Refresh</button>
                  </div>
                  
                  <div class="info-grid">
                      <div class="info-card">
                          <h3>üîß Connection Steps</h3>
                          <p>1. Click "Connect Desktop"</p>
                          <p>2. Enter username: <strong>vncuser</strong></p>
                          <p>3. Enter password: <strong>VNC_PASS_PLACEHOLDER</strong></p>
                          <p>4. Wait for desktop to load</p>
                      </div>
                      <div class="info-card">
                          <h3>üì± Available Apps</h3>
                          <p>üåê Firefox Browser</p>
                          <p>üíª Visual Studio Code</p>
                          <p>üñ•Ô∏è Terminal</p>
                          <p>üìÅ Finder</p>
                          <p>üõ†Ô∏è System Preferences</p>
                      </div>
                      <div class="info-card">
                          <h3>‚ö° System Info</h3>
                          <p><strong>OS:</strong> macOS 14.7.6</p>
                          <p><strong>CPU:</strong> ARM64 (3 cores)</p>
                          <p><strong>RAM:</strong> 7 GB</p>
                          <p><strong>VNC Port:</strong> 5900</p>
                      </div>
                      <div class="info-card">
                          <h3>üí° Tips</h3>
                          <p>‚Ä¢ Use dedicated VNC user account</p>
                          <p>‚Ä¢ Right-click for context menus</p>
                          <p>‚Ä¢ Cmd+Space for Spotlight</p>
                          <p>‚Ä¢ Full keyboard/mouse support</p>
                      </div>
                  </div>
                  
                  <div class="desktop-viewer">
                      <h3>üñ•Ô∏è Desktop Viewer</h3>
                      <iframe id="vnc-frame" class="vnc-frame" src="about:blank"></iframe>
                  </div>
              </div>
              
              <script>
                  function connectVNC() {
                      const frame = document.getElementById('vnc-frame');
                      frame.src = '/vnc.html?autoconnect=true&resize=scale';
                  }
                  
                  function refreshVNC() {
                      const frame = document.getElementById('vnc-frame');
                      frame.src = frame.src;
                  }
                  
                  // Auto-connect after 3 seconds
                  setTimeout(connectVNC, 3000);
              </script>
          </body>

          </html>

          HTMLEOF


          # Replace password placeholder

          sed -i '' "s/VNC_PASS_PLACEHOLDER/${{ github.event.inputs.vnc_password }}/g" /tmp/noVNC/index.html


          echo "‚úÖ Enhanced VNC interface created"
      - name: Setup Web Terminal
        run: |
          echo "üíª Setting up web terminal..."
          brew install ttyd
          ttyd --port 8080 --writable /bin/bash > /tmp/ttyd.log 2>&1 &
          echo "‚úÖ Web terminal started on port 8080"
      - name: Setup Nginx Proxy
        run: |
          echo "üîÑ Setting up nginx proxy..."
          brew install nginx

          cat > /tmp/nginx.conf << 'NGINXEOF'
          events { worker_connections 1024; }
          http {
              include /opt/homebrew/etc/nginx/mime.types;
              default_type application/octet-stream;
              
              server {
                  listen 8090;
                  
                  location / {
                      proxy_pass http://127.0.0.1:6080/;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection "upgrade";
                      proxy_set_header Host $host;
                  }
                  
                  location /websockify {
                      proxy_pass http://127.0.0.1:6080/websockify;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection "upgrade";
                  }
                  
                  location /terminal {
                      proxy_pass http://127.0.0.1:8080/;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection "upgrade";
                  }
              }
          }
          NGINXEOF

          nginx -c /tmp/nginx.conf > /tmp/nginx.log 2>&1 &
          echo "‚úÖ Nginx proxy started on port 8090"
      - name: Setup Public Tunnels
        run: >
          echo "üöÄ Setting up public access tunnels..."


          # Cloudflare tunnel

          brew install cloudflared

          cloudflared tunnel --url http://localhost:8090 > /tmp/cloudflare.log 2>&1 &

          sleep 25


          CF_URL=$(grep -o 'https://[^[:space:]]*\.trycloudflare\.com' /tmp/cloudflare.log | head -1)

          if [ ! -z "$CF_URL" ]; then
              echo "$CF_URL" > /tmp/cloudflare_url.txt
              echo "‚úÖ Cloudflare tunnel: $CF_URL"
          fi


          # Localtunnel backup

          npx localtunnel --port 8090 --subdomain macos-vnc-$(date +%s) > /tmp/localtunnel.log 2>&1 &

          sleep 15


          LT_URL=$(grep -o 'https://[^[:space:]]*' /tmp/localtunnel.log | head -1)

          if [ ! -z "$LT_URL" ]; then
              echo "$LT_URL" > /tmp/localtunnel_url.txt
              echo "‚úÖ Localtunnel: $LT_URL"
          fi
      - name: Debug VNC Status
        run: >
          echo ""

          echo "üîç VNC Server Debug Information:"

          echo "================================"


          # Check VNC processes

          echo "VNC Processes:"

          ps aux | grep -i vnc || echo "No VNC processes found"

          echo ""


          # Check listening ports

          echo "Listening Ports:"

          netstat -an | grep LISTEN | grep -E ":(590[0-9]|5900)" || echo "No VNC ports listening"

          echo ""


          # Check screen sharing

          echo "Screen Sharing Status:"

          sudo launchctl list | grep screensharing || echo "Screen sharing not found"

          echo ""


          # Check VNC user

          echo "VNC User Status:"

          id vncuser 2>/dev/null || echo "VNC user not found"

          echo ""


          # Check websockify

          echo "Websockify Status:"

          pgrep -f websockify > /dev/null && echo "‚úÖ Running" || echo "‚ùå Not running"


          if [ -f /tmp/websockify.log ]; then
              echo "Websockify Log:"
              tail -5 /tmp/websockify.log
          fi
      - name: Display Access Information
        run: |
          echo ""
          echo "üéâ macOS VNC Desktop is Ready!"
          echo "üñ•Ô∏è  Full graphical desktop with user authentication"
          echo ""
          echo "üîê VNC AUTHENTICATION:"
          echo "‚Ä¢ Username: vncuser"
          echo "‚Ä¢ Password: ${{ github.event.inputs.vnc_password }}"
          echo "‚Ä¢ Method: User-based authentication (not password-only)"
          echo ""
          echo "üåê ACCESS URLS:"
          echo "=============="

          if [ -f /tmp/cloudflare_url.txt ]; then
              CF_URL=$(cat /tmp/cloudflare_url.txt)
              echo "ü•á CLOUDFLARE TUNNEL:"
              echo "   üñ•Ô∏è  Desktop: $CF_URL"
              echo "   üíª Terminal: $CF_URL/terminal"
              echo ""
          fi

          if [ -f /tmp/localtunnel_url.txt ]; then
              LT_URL=$(cat /tmp/localtunnel_url.txt)
              echo "ü•à LOCALTUNNEL:"
              echo "   üñ•Ô∏è  Desktop: $LT_URL"
              echo "   üíª Terminal: $LT_URL/terminal"
              echo "   üîë Tunnel Password: $PUBLIC_IP"
              echo ""
          fi

          echo "üéÆ USAGE INSTRUCTIONS:"
          echo "‚Ä¢ Open desktop URL in web browser"
          echo "‚Ä¢ Click 'Connect Desktop' button"
          echo "‚Ä¢ Enter username: vncuser"
          echo "‚Ä¢ Enter password: ${{ github.event.inputs.vnc_password }}"
          echo "‚Ä¢ Wait for macOS desktop to load"
          echo "‚Ä¢ Use mouse/keyboard normally"
      - name: Keep Services Running
        run: >
          echo ""

          echo "‚è∞ Keeping VNC desktop session alive for 6 hours..."

          echo "üîÑ Auto-monitoring and restarting services as needed"

          echo ""


          while true; do
              # Monitor and restart services
              if ! pgrep -f websockify > /dev/null; then
                  echo "üîÑ Restarting websockify..."
                  source /tmp/venv/bin/activate
                  cd /tmp/websockify
                  websockify --web /tmp/noVNC 6080 localhost:5900 > /tmp/websockify.log 2>&1 &
              fi
              
              if ! pgrep ttyd > /dev/null; then
                  echo "üîÑ Restarting terminal..."
                  ttyd --port 8080 --writable /bin/bash > /tmp/ttyd.log 2>&1 &
              fi
              
              if ! pgrep nginx > /dev/null; then
                  echo "üîÑ Restarting nginx..."
                  nginx -c /tmp/nginx.conf > /tmp/nginx.log 2>&1 &
              fi
              
              echo "$(date): ‚úÖ VNC desktop services running | IP: $PUBLIC_IP"
              sleep 300
          done
