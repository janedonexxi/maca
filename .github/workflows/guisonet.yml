name: macOS VNC Desktop (TigerVNC Solution)
on:
  workflow_dispatch:
    inputs:
      vnc_password:
        description: 'VNC Password'
        required: false
        default: 'github2024'
        type: string

jobs:
  macos-desktop:
    runs-on: macos-latest
    timeout-minutes: 360
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: System Setup
      run: |
        PUBLIC_IP=$(curl -s https://ipinfo.io/ip)
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
        echo "üñ•Ô∏è  macOS $(sw_vers -productVersion) ready"
        
    - name: Install Desktop Environment
      run: |
        echo "üì¶ Installing desktop environment..."
        
        # Install basic tools
        brew install node python3 ttyd
        npm install -g localtunnel
        
        # Python virtual environment
        python3 -m venv /tmp/venv
        source /tmp/venv/bin/activate
        pip install websockify
        
        # Install GUI applications
        brew install --cask firefox || true
        brew install --cask visual-studio-code || true
        
        echo "‚úÖ Desktop environment ready"
        
    - name: Install and Setup TigerVNC Server
      run: |
        echo "üêÖ Installing TigerVNC server..."
        
        # Install TigerVNC (more reliable than macOS built-in VNC)
        brew install tiger-vnc
        
        # Create VNC directory and password
        mkdir -p ~/.vnc
        
        # Create VNC password file using TigerVNC method
        echo "${{ github.event.inputs.vnc_password }}" | vncpasswd -f > ~/.vnc/passwd
        chmod 600 ~/.vnc/passwd
        
        # Create VNC startup script
        cat > ~/.vnc/xstartup << 'VNCEOF'
        #!/bin/bash
        unset SESSION_MANAGER
        unset DBUS_SESSION_BUS_ADDRESS
        
        # Start window manager
        export DISPLAY=:1
        
        # Start basic desktop environment
        /System/Library/CoreServices/Dock.app/Contents/MacOS/Dock &
        /System/Library/CoreServices/Finder.app/Contents/MacOS/Finder &
        /System/Library/CoreServices/SystemUIServer.app/Contents/MacOS/SystemUIServer &
        
        # Open some applications
        sleep 5
        open -a "System Preferences" &
        open -a "Firefox" &
        
        # Keep session alive
        exec /bin/bash
        VNCEOF
        
        chmod +x ~/.vnc/xstartup
        
        # Start TigerVNC server
        vncserver :1 -geometry 1920x1080 -depth 24 -localhost no
        
        echo "‚úÖ TigerVNC server started on display :1"
        
    - name: Setup Alternative VNC (X11VNC)
      run: |
        echo "üîÑ Setting up X11VNC as backup..."
        
        # Install X11VNC
        brew install x11vnc
        
        # Start X11VNC on display :0 (fallback)
        x11vnc -display :0 -passwd ${{ github.event.inputs.vnc_password }} -forever -noxdamage -repeat -rfbport 5902 -nap &
        
        echo "‚úÖ X11VNC backup server started on port 5902"
        
    - name: Setup noVNC with Multiple VNC Servers
      run: |
        echo "üåê Setting up noVNC with multiple VNC options..."
        
        # Clone noVNC
        git clone https://github.com/novnc/noVNC.git /tmp/noVNC
        git clone https://github.com/novnc/websockify.git /tmp/websockify
        
        source /tmp/venv/bin/activate
        
        # Wait for VNC servers to start
        sleep 10
        
        # Try different VNC ports and start websockify
        VNC_CONNECTED=false
        
        # Try TigerVNC on port 5901 (display :1)
        if netstat -an | grep ":5901.*LISTEN" > /dev/null; then
            echo "üîÑ Connecting to TigerVNC on port 5901..."
            websockify --web /tmp/noVNC 6080 localhost:5901 > /tmp/websockify.log 2>&1 &
            sleep 5
            if pgrep -f websockify > /dev/null; then
                echo "‚úÖ noVNC connected to TigerVNC (port 5901)"
                VNC_CONNECTED=true
            fi
        fi
        
        # Try X11VNC on port 5902 if TigerVNC failed
        if [ "$VNC_CONNECTED" = false ] && netstat -an | grep ":5902.*LISTEN" > /dev/null; then
            echo "üîÑ Connecting to X11VNC on port 5902..."
            pkill -f websockify || true
            websockify --web /tmp/noVNC 6080 localhost:5902 > /tmp/websockify.log 2>&1 &
            sleep 5
            if pgrep -f websockify > /dev/null; then
                echo "‚úÖ noVNC connected to X11VNC (port 5902)"
                VNC_CONNECTED=true
            fi
        fi
        
        # Force start on 5901 if nothing worked
        if [ "$VNC_CONNECTED" = false ]; then
            echo "üîÑ Force connecting to port 5901..."
            websockify --web /tmp/noVNC 6080 localhost:5901 > /tmp/websockify.log 2>&1 &
        fi
        
    - name: Create Working VNC Interface
      run: |
        echo "üé® Creating VNC interface..."
        
        cat > /tmp/noVNC/index.html << 'HTMLEOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>üçé macOS TigerVNC Desktop</title>
            <meta charset="utf-8">
            <style>
                body { 
                    font-family: -apple-system, sans-serif;
                    background: linear-gradient(135deg, #667eea, #764ba2);
                    color: white; 
                    padding: 20px;
                    margin: 0;
                }
                .container { max-width: 1200px; margin: 0 auto; text-align: center; }
                .header {
                    background: rgba(255,255,255,0.1);
                    padding: 30px;
                    border-radius: 15px;
                    margin-bottom: 30px;
                    backdrop-filter: blur(10px);
                }
                .auth-info {
                    background: rgba(52, 199, 89, 0.2);
                    padding: 20px;
                    border-radius: 10px;
                    margin: 20px 0;
                    border-left: 4px solid #34C759;
                }
                .btn {
                    display: inline-block;
                    padding: 15px 30px;
                    background: #007AFF;
                    color: white;
                    text-decoration: none;
                    border-radius: 10px;
                    margin: 10px;
                    font-weight: bold;
                    transition: all 0.3s;
                }
                .btn:hover { background: #0056CC; transform: translateY(-2px); }
                .btn-success { background: #34C759; }
                .btn-warning { background: #FF9500; }
                .vnc-frame {
                    width: 100%;
                    height: 75vh;
                    border: none;
                    border-radius: 10px;
                    background: black;
                    margin: 20px 0;
                }
                .info-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                    margin: 20px 0;
                    text-align: left;
                }
                .info-card {
                    background: rgba(255,255,255,0.1);
                    padding: 20px;
                    border-radius: 10px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üçé macOS TigerVNC Desktop</h1>
                    <p>Reliable VNC Server with Authentication Fix</p>
                    
                    <div class="auth-info">
                        <h3>üîê VNC Authentication (FIXED)</h3>
                        <p><strong>Server:</strong> TigerVNC (more reliable than macOS built-in)</p>
                        <p><strong>Password:</strong> VNC_PASS_PLACEHOLDER</p>
                        <p><strong>No Username Required</strong> - Password-only authentication</p>
                    </div>
                </div>
                
                <div>
                    <button class="btn" onclick="connectVNC()">üñ•Ô∏è Connect Desktop</button>
                    <a href="/vnc.html?autoconnect=true&resize=scale&password=VNC_PASS_PLACEHOLDER" class="btn btn-success" target="_blank">üöÄ Auto Connect</a>
                    <a href="/terminal" class="btn btn-warning" target="_blank">üíª Terminal</a>
                </div>
                
                <div class="info-grid">
                    <div class="info-card">
                        <h3>üîß Connection Steps</h3>
                        <p>1. Click "Connect Desktop"</p>
                        <p>2. <strong>Leave username BLANK</strong></p>
                        <p>3. Enter password: <strong>VNC_PASS_PLACEHOLDER</strong></p>
                        <p>4. Desktop should load immediately</p>
                    </div>
                    <div class="info-card">
                        <h3>‚úÖ Authentication Fix</h3>
                        <p>‚Ä¢ Using TigerVNC instead of macOS VNC</p>
                        <p>‚Ä¢ Password-only authentication</p>
                        <p>‚Ä¢ No username required</p>
                        <p>‚Ä¢ Reliable connection</p>
                    </div>
                    <div class="info-card">
                        <h3>üì± Available Apps</h3>
                        <p>üåê Firefox Browser</p>
                        <p>üíª Visual Studio Code</p>
                        <p>üñ•Ô∏è Terminal</p>
                        <p>üìÅ Finder</p>
                        <p>‚öôÔ∏è System Preferences</p>
                    </div>
                    <div class="info-card">
                        <h3>üêõ If Still Fails</h3>
                        <p>‚Ä¢ Try "Auto Connect" button</p>
                        <p>‚Ä¢ Refresh the page</p>
                        <p>‚Ä¢ Check terminal for VNC status</p>
                        <p>‚Ä¢ Use backup X11VNC server</p>
                    </div>
                </div>
                
                <iframe id="vnc-frame" class="vnc-frame" src="about:blank"></iframe>
            </div>
            
            <script>
                function connectVNC() {
                    document.getElementById('vnc-frame').src = '/vnc.html?resize=scale';
                }
                setTimeout(connectVNC, 3000);
            </script>
        </body>
        </html>
        HTMLEOF
        
        sed -i '' "s/VNC_PASS_PLACEHOLDER/${{ github.event.inputs.vnc_password }}/g" /tmp/noVNC/index.html
        
    - name: Setup Web Terminal and Proxy
      run: |
        # Web terminal
        ttyd --port 8080 --writable /bin/bash &
        
        # Nginx proxy
        brew install nginx
        cat > /tmp/nginx.conf << 'EOF'
        events { worker_connections 1024; }
        http {
            include /opt/homebrew/etc/nginx/mime.types;
            default_type application/octet-stream;
            server {
                listen 8090;
                location / {
                    proxy_pass http://127.0.0.1:6080/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                }
                location /terminal {
                    proxy_pass http://127.0.0.1:8080/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                }
            }
        }
        EOF
        nginx -c /tmp/nginx.conf &
        
    - name: Setup Public Tunnels
      run: |
        # Cloudflare tunnel
        brew install cloudflared
        cloudflared tunnel --url http://localhost:8090 > /tmp/cf.log 2>&1 &
        sleep 25
        
        CF_URL=$(grep -o 'https://[^[:space:]]*\.trycloudflare\.com' /tmp/cf.log | head -1)
        echo "$CF_URL" > /tmp/url.txt
        
    - name: Debug VNC Status and Display Access
      run: |
        echo ""
        echo "üîç VNC SERVER STATUS:"
        echo "===================="
        
        # Check TigerVNC
        echo "TigerVNC Processes:"
        ps aux | grep -i vnc | grep -v grep || echo "No TigerVNC processes"
        
        # Check X11VNC
        echo "X11VNC Processes:"
        ps aux | grep x11vnc | grep -v grep || echo "No X11VNC processes"
        
        # Check VNC ports
        echo "VNC Ports:"
        netstat -an | grep LISTEN | grep -E ":(590[0-9])" || echo "No VNC ports"
        
        # Check websockify
        echo "Websockify Status:"
        pgrep -f websockify && echo "‚úÖ Running" || echo "‚ùå Not running"
        
        if [ -f /tmp/websockify.log ]; then
            echo "Websockify Log:"
            tail -3 /tmp/websockify.log
        fi
        
        echo ""
        echo "üéâ TigerVNC Desktop Ready!"
        echo "========================="
        
        if [ -f /tmp/url.txt ]; then
            URL=$(cat /tmp/url.txt)
            echo "üåê Access URL: $URL"
            echo ""
            echo "üîê Authentication:"
            echo "‚Ä¢ Username: LEAVE BLANK"
            echo "‚Ä¢ Password: ${{ github.event.inputs.vnc_password }}"
            echo "‚Ä¢ Server: TigerVNC (reliable authentication)"
        fi
        
    - name: Keep Services Running
      run: |
        echo "‚è∞ Keeping TigerVNC desktop alive..."
        
        while true; do
            # Monitor TigerVNC
            if ! pgrep -f "Xvnc.*:1" > /dev/null; then
                echo "üîÑ Restarting TigerVNC..."
                vncserver :1 -geometry 1920x1080 -depth 24 -localhost no
            fi
            
            # Monitor websockify
            if ! pgrep -f websockify > /dev/null; then
                echo "üîÑ Restarting websockify..."
                source /tmp/venv/bin/activate
                websockify --web /tmp/noVNC 6080 localhost:5901 > /tmp/websockify.log 2>&1 &
            fi
            
            # Monitor other services
            if ! pgrep ttyd > /dev/null; then
                ttyd --port 8080 --writable /bin/bash &
            fi
            
            if ! pgrep nginx > /dev/null; then
                nginx -c /tmp/nginx.conf &
            fi
            
            echo "$(date): ‚úÖ TigerVNC services running"
            sleep 300
        done
