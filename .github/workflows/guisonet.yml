name: macOS Desktop with noVNC (Fixed)
on:
  workflow_dispatch:
    inputs:
      vnc_password:
        description: 'VNC Password'
        required: false
        default: 'github2024'
        type: string
      session_password:
        description: 'Web Terminal Password'
        required: false
        default: 'github2024'
        type: string

jobs:
  macos-desktop:
    runs-on: macos-latest
    timeout-minutes: 360
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get System Info
      run: |
        PUBLIC_IP=$(curl -s https://ipinfo.io/ip)
        echo "üåê Public IP: $PUBLIC_IP"
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
        
        echo "üñ•Ô∏è  System: macOS $(sw_vers -productVersion) ($(uname -m))"
        echo "üíæ RAM: $(sysctl -n hw.memsize | awk '{print $1/1024/1024/1024 " GB"}') | CPU: $(sysctl -n hw.ncpu) cores"
        
    - name: Install Desktop Components (Fixed)
      run: |
        echo "üì¶ Installing desktop components..."
        
        # Install basic packages
        brew install node python3
        npm install -g localtunnel
        
        # Install VNC server (use built-in macOS VNC instead of TigerVNC)
        echo "üîß Setting up VNC server..."
        
        # Enable macOS built-in VNC server
        sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
          -activate -configure -access -on \
          -clientopts -setvnclegacy -vnclegacy yes \
          -clientopts -setvncpw -vncpw ${{ github.event.inputs.vnc_password }} \
          -restart -agent -privs -all
        
        echo "‚úÖ VNC server configured"
        
    - name: Install noVNC and Websockify (Manual)
      run: |
        echo "üåê Installing noVNC manually..."
        
        # Clone noVNC
        git clone https://github.com/novnc/noVNC.git /tmp/noVNC
        cd /tmp/noVNC
        
        # Install websockify via pip instead of brew
        python3 -m pip install websockify
        
        # Download websockify standalone
        curl -L https://github.com/novnc/websockify/archive/refs/heads/master.zip -o websockify.zip
        unzip websockify.zip
        mv websockify-master /tmp/websockify
        
        echo "‚úÖ noVNC and websockify installed"
        
    - name: Setup Desktop Applications
      run: |
        echo "üì± Installing desktop applications..."
        
        # Install GUI applications
        brew install --cask firefox || echo "Firefox install failed, continuing..."
        brew install --cask visual-studio-code || echo "VSCode install failed, continuing..."
        brew install --cask sublime-text || echo "Sublime install failed, continuing..."
        
        # Install terminal applications
        brew install htop neofetch git
        
        echo "‚úÖ Applications installed"
        
    - name: Configure VNC and Display
      run: |
        echo "üñ•Ô∏è  Configuring display and VNC..."
        
        # Create VNC password file for compatibility
        mkdir -p ~/.vnc
        echo "${{ github.event.inputs.vnc_password }}" | python3 -c "
import sys, crypt
password = sys.stdin.read().strip()
print(crypt.crypt(password, crypt.mksalt()))
        " > ~/.vnc/passwd
        chmod 600 ~/.vnc/passwd
        
        # Start VNC server on display :1
        # Use macOS built-in VNC which runs on port 5900
        echo "üîÑ VNC server should be running on port 5900"
        
    - name: Start noVNC Web Interface
      run: |
        echo "üåê Starting noVNC web interface..."
        
        # Start websockify to bridge VNC and WebSocket
        cd /tmp/websockify
        python3 websockify.py --web /tmp/noVNC 6080 localhost:5900 &
        
        sleep 10
        echo "‚úÖ noVNC started on port 6080"
        
        # Test if websockify is running
        if pgrep -f websockify; then
            echo "‚úÖ Websockify process is running"
        else
            echo "‚ö†Ô∏è  Websockify may not be running properly"
        fi
        
    - name: Create Custom Desktop Interface
      run: |
        echo "üé® Creating custom web interface..."
        
        # Create enhanced HTML interface
        cat > /tmp/noVNC/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>üçé macOS Desktop - GitHub Actions</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
                * { margin: 0; padding: 0; box-sizing: border-box; }
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                    background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
                    color: #fff; 
                    min-height: 100vh;
                    padding: 20px;
                }
                .container {
                    max-width: 1400px;
                    margin: 0 auto;
                }
                .header {
                    text-align: center;
                    margin-bottom: 30px;
                    padding: 20px;
                    background: rgba(255,255,255,0.1);
                    border-radius: 15px;
                    backdrop-filter: blur(10px);
                }
                .desktop-controls {
                    display: flex;
                    justify-content: center;
                    gap: 15px;
                    margin: 20px 0;
                    flex-wrap: wrap;
                }
                .btn {
                    padding: 12px 24px;
                    border: none;
                    border-radius: 8px;
                    font-weight: 600;
                    text-decoration: none;
                    display: inline-block;
                    transition: all 0.3s ease;
                    cursor: pointer;
                }
                .btn-primary { background: #007AFF; color: white; }
                .btn-primary:hover { background: #0056CC; transform: translateY(-2px); }
                .btn-success { background: #34C759; color: white; }
                .btn-success:hover { background: #28A745; transform: translateY(-2px); }
                .btn-warning { background: #FF9500; color: white; }
                .btn-warning:hover { background: #E6850E; transform: translateY(-2px); }
                
                .desktop-viewer {
                    background: rgba(0,0,0,0.3);
                    border-radius: 15px;
                    padding: 20px;
                    margin: 20px 0;
                }
                .vnc-container {
                    position: relative;
                    width: 100%;
                    height: 70vh;
                    min-height: 600px;
                    border-radius: 10px;
                    overflow: hidden;
                    background: #000;
                }
                iframe {
                    width: 100%;
                    height: 100%;
                    border: none;
                }
                .info-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                    margin: 20px 0;
                }
                .info-card {
                    background: rgba(255,255,255,0.1);
                    padding: 20px;
                    border-radius: 10px;
                    backdrop-filter: blur(5px);
                }
                .status-indicator {
                    display: inline-block;
                    width: 10px;
                    height: 10px;
                    border-radius: 50%;
                    background: #34C759;
                    margin-right: 8px;
                    animation: pulse 2s infinite;
                }
                @keyframes pulse {
                    0% { opacity: 1; }
                    50% { opacity: 0.5; }
                    100% { opacity: 1; }
                }
                .connection-status {
                    text-align: center;
                    padding: 10px;
                    background: rgba(52, 199, 89, 0.2);
                    border-radius: 8px;
                    margin: 10px 0;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üçé macOS Desktop Environment</h1>
                    <p>GitHub Actions ile tam grafik aray√ºz√º deneyimi</p>
                    <div class="connection-status">
                        <span class="status-indicator"></span>
                        Desktop Ready - VNC Password: <strong>PLACEHOLDER_VNC_PASS</strong>
                    </div>
                </div>
                
                <div class="desktop-controls">
                    <button class="btn btn-primary" onclick="connectDesktop()">üñ•Ô∏è Connect to Desktop</button>
                    <a href="/vnc.html?autoconnect=true&resize=scale&password=PLACEHOLDER_VNC_PASS" class="btn btn-success" target="_blank">üöÄ Full Screen Desktop</a>
                    <button class="btn btn-warning" onclick="openTerminal()">üíª Web Terminal</button>
                    <button class="btn btn-primary" onclick="refreshConnection()">üîÑ Refresh</button>
                </div>
                
                <div class="info-grid">
                    <div class="info-card">
                        <h3>üñ•Ô∏è Display Settings</h3>
                        <p><strong>Resolution:</strong> 1920x1080</p>
                        <p><strong>Color Depth:</strong> 24-bit</p>
                        <p><strong>VNC Port:</strong> 5900</p>
                        <p><strong>Web Port:</strong> 6080</p>
                    </div>
                    <div class="info-card">
                        <h3>üì± Available Apps</h3>
                        <p>‚Ä¢ üåê Firefox Browser</p>
                        <p>‚Ä¢ üíª VS Code Editor</p>
                        <p>‚Ä¢ üìù Sublime Text</p>
                        <p>‚Ä¢ üñ•Ô∏è Terminal</p>
                        <p>‚Ä¢ üìÅ Finder</p>
                    </div>
                    <div class="info-card">
                        <h3>‚ö° System Info</h3>
                        <p><strong>OS:</strong> macOS 14.7.6</p>
                        <p><strong>Arch:</strong> ARM64 (Apple Silicon)</p>
                        <p><strong>RAM:</strong> 7 GB</p>
                        <p><strong>CPU:</strong> 3 cores</p>
                    </div>
                </div>
                
                <div class="desktop-viewer">
                    <h3>üñ•Ô∏è Embedded Desktop Viewer</h3>
                    <div class="vnc-container">
                        <iframe id="desktop-frame" src="about:blank"></iframe>
                    </div>
                </div>
            </div>
            
            <script>
                function connectDesktop() {
                    const frame = document.getElementById('desktop-frame');
                    frame.src = '/vnc.html?autoconnect=true&resize=scale&password=PLACEHOLDER_VNC_PASS';
                }
                
                function openTerminal() {
                    window.open('/terminal', '_blank');
                }
                
                function refreshConnection() {
                    const frame = document.getElementById('desktop-frame');
                    frame.src = frame.src;
                }
                
                // Auto-connect on page load
                window.onload = function() {
                    setTimeout(connectDesktop, 2000);
                };
            </script>
        </body>
        </html>
        EOF
        
        # Replace placeholder
        sed -i '' "s/PLACEHOLDER_VNC_PASS/${{ github.event.inputs.vnc_password }}/g" /tmp/noVNC/index.html
        
        echo "‚úÖ Custom interface created"
        
    - name: Setup Web Terminal
      run: |
        echo "üíª Setting up web terminal..."
        
        # Install ttyd
        brew install ttyd
        
        # Start web terminal
        ttyd --port 8080 --writable /bin/bash &
        
        echo "‚úÖ Web terminal started on port 8080"
        
    - name: Setup Reverse Proxy
      run: |
        echo "üîÑ Setting up nginx reverse proxy..."
        
        brew install nginx
        
        cat > /tmp/nginx.conf << 'EOF'
        events { worker_connections 1024; }
        http {
            include /opt/homebrew/etc/nginx/mime.types;
            default_type application/octet-stream;
            
            server {
                listen 8090;
                
                location / {
                    proxy_pass http://127.0.0.1:6080/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                }
                
                location /websockify {
                    proxy_pass http://127.0.0.1:6080/websockify;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                }
                
                location /terminal {
                    proxy_pass http://127.0.0.1:8080/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                }
            }
        }
        EOF
        
        nginx -c /tmp/nginx.conf &
        echo "‚úÖ Nginx started on port 8090"
        
    - name: Setup Public Access
      run: |
        echo "üöÄ Setting up public tunnels..."
        
        # Cloudflare tunnel
        brew install cloudflared
        cloudflared tunnel --url http://localhost:8090 > cloudflare.log 2>&1 &
        sleep 20
        
        CF_URL=$(grep -o 'https://[^[:space:]]*\.trycloudflare\.com' cloudflare.log | head -1)
        if [ ! -z "$CF_URL" ]; then
            echo "$CF_URL" > cloudflare_url.txt
        fi
        
        # Localtunnel backup
        npx localtunnel --port 8090 --subdomain macos-desktop-$(date +%s) > localtunnel.log 2>&1 &
        sleep 10
        
        LT_URL=$(grep -o 'https://[^[:space:]]*' localtunnel.log | head -1)
        if [ ! -z "$LT_URL" ]; then
            echo "$LT_URL" > localtunnel_url.txt
        fi
        
    - name: Display Access Information
      run: |
        echo ""
        echo "üéâ macOS Desktop Environment is Ready!"
        echo "üñ•Ô∏è  Full GUI + Terminal access via web browser"
        echo ""
        echo "üìä System Status:"
        echo "‚Ä¢ VNC Server: ‚úÖ Running on port 5900"
        echo "‚Ä¢ noVNC Web: ‚úÖ Running on port 6080" 
        echo "‚Ä¢ Web Terminal: ‚úÖ Running on port 8080"
        echo "‚Ä¢ Nginx Proxy: ‚úÖ Running on port 8090"
        echo ""
        echo "üåê PUBLIC ACCESS:"
        echo "================"
        
        if [ -f cloudflare_url.txt ]; then
            CF_URL=$(cat cloudflare_url.txt)
            echo "ü•á CLOUDFLARE TUNNEL:"
            echo "   üñ•Ô∏è  Desktop: $CF_URL"
            echo "   üíª Terminal: $CF_URL/terminal"
            echo "   üîê VNC Password: ${{ github.event.inputs.vnc_password }}"
            echo ""
        fi
        
        if [ -f localtunnel_url.txt ]; then
            LT_URL=$(cat localtunnel_url.txt)
            echo "ü•à LOCALTUNNEL:"
            echo "   üñ•Ô∏è  Desktop: $LT_URL"
            echo "   üíª Terminal: $LT_URL/terminal"
            echo "   üîë Tunnel Password: $PUBLIC_IP"
            echo "   üîê VNC Password: ${{ github.event.inputs.vnc_password }}"
            echo ""
        fi
        
        echo "üéÆ USAGE GUIDE:"
        echo "‚Ä¢ Open desktop URL in web browser"
        echo "‚Ä¢ Click 'Connect to Desktop' button"
        echo "‚Ä¢ Use VNC password when prompted"
        echo "‚Ä¢ Full mouse/keyboard control available"
        echo "‚Ä¢ Applications available in dock/launchpad"
        
    - name: Keep Services Running
      run: |
        echo "‚è∞ Keeping desktop session alive for 6 hours..."
        
        while true; do
            # Monitor services
            if ! pgrep -f websockify > /dev/null; then
                echo "üîÑ Restarting noVNC..."
                cd /tmp/websockify
                python3 websockify.py --web /tmp/noVNC 6080 localhost:5900 &
            fi
            
            if ! pgrep ttyd > /dev/null; then
                echo "üîÑ Restarting terminal..."
                ttyd --port 8080 --writable /bin/bash &
            fi
            
            if ! pgrep nginx > /dev/null; then
                echo "üîÑ Restarting proxy..."
                nginx -c /tmp/nginx.conf &
            fi
            
            echo "$(date): ‚úÖ Desktop services running"
            sleep 300
        done
