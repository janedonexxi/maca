name: macOS Desktop with noVNC
on:
  workflow_dispatch:
    inputs:
      vnc_password:
        description: 'VNC Password'
        required: false
        default: 'github2024'
        type: string
      session_password:
        description: 'Web Terminal Password'
        required: false
        default: 'github2024'
        type: string

jobs:
  macos-desktop:
    runs-on: macos-latest
    timeout-minutes: 360
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get System Info
      run: |
        PUBLIC_IP=$(curl -s https://ipinfo.io/ip)
        echo "üåê Public IP: $PUBLIC_IP"
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
        
        echo "üñ•Ô∏è  System: macOS $(sw_vers -productVersion) ($(uname -m))"
        echo "üíæ RAM: $(sysctl -n hw.memsize | awk '{print $1/1024/1024/1024 " GB"}') | CPU: $(sysctl -n hw.ncpu) cores"
        
    - name: Install Basic Tools
      run: |
        echo "üì¶ Installing basic tools..."
        brew install node python3
        npm install -g localtunnel
        echo "‚úÖ Basic tools installed"
        
    - name: Setup VNC Server
      run: |
        echo "üîß Setting up VNC server..."
        
        # Enable macOS built-in VNC server
        sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
          -activate -configure -access -on \
          -clientopts -setvnclegacy -vnclegacy yes \
          -clientopts -setvncpw -vncpw ${{ github.event.inputs.vnc_password }} \
          -restart -agent -privs -all
        
        echo "‚úÖ VNC server configured on port 5900"
        
    - name: Install noVNC Components
      run: |
        echo "üåê Installing noVNC..."
        
        # Clone noVNC
        git clone https://github.com/novnc/noVNC.git /tmp/noVNC
        
        # Install websockify via pip
        python3 -m pip install websockify
        
        # Download websockify source as backup
        curl -L https://github.com/novnc/websockify/archive/refs/heads/master.zip -o /tmp/websockify.zip
        cd /tmp
        unzip websockify.zip
        mv websockify-master websockify
        
        echo "‚úÖ noVNC components installed"
        
    - name: Install Desktop Applications
      run: |
        echo "üì± Installing applications..."
        
        # Install GUI applications (continue on failure)
        brew install --cask firefox || true
        brew install --cask visual-studio-code || true
        brew install --cask sublime-text || true
        
        # Install CLI tools
        brew install htop neofetch git
        
        echo "‚úÖ Applications installed"
        
    - name: Start noVNC Service
      run: |
        echo "üåê Starting noVNC web interface..."
        
        # Start websockify
        cd /tmp/websockify
        python3 websockify.py --web /tmp/noVNC 6080 localhost:5900 > /tmp/websockify.log 2>&1 &
        
        sleep 10
        
        if pgrep -f websockify; then
            echo "‚úÖ noVNC started successfully on port 6080"
        else
            echo "‚ö†Ô∏è  noVNC startup issue, checking logs..."
            cat /tmp/websockify.log
        fi
        
    - name: Create Web Interface
      run: |
        echo "üé® Creating web interface..."
        
        cat > /tmp/noVNC/index.html << 'HTMLEOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>macOS Desktop - GitHub Actions</title>
            <meta charset="utf-8">
            <style>
                body { 
                    font-family: -apple-system, sans-serif;
                    background: linear-gradient(135deg, #1e3c72, #2a5298);
                    color: white; 
                    margin: 0; 
                    padding: 20px;
                }
                .container {
                    max-width: 1200px;
                    margin: 0 auto;
                    text-align: center;
                }
                .header {
                    background: rgba(255,255,255,0.1);
                    padding: 30px;
                    border-radius: 15px;
                    margin-bottom: 30px;
                }
                .btn {
                    display: inline-block;
                    padding: 15px 30px;
                    margin: 10px;
                    background: #007AFF;
                    color: white;
                    text-decoration: none;
                    border-radius: 10px;
                    font-weight: bold;
                    transition: all 0.3s;
                }
                .btn:hover {
                    background: #0056CC;
                    transform: translateY(-2px);
                }
                .btn-success { background: #34C759; }
                .btn-success:hover { background: #28A745; }
                .desktop-frame {
                    width: 100%;
                    height: 70vh;
                    border: none;
                    border-radius: 10px;
                    background: black;
                    margin: 20px 0;
                }
                .info-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 20px;
                    margin: 20px 0;
                }
                .info-card {
                    background: rgba(255,255,255,0.1);
                    padding: 20px;
                    border-radius: 10px;
                    text-align: left;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üçé macOS Desktop Environment</h1>
                    <p>GitHub Actions Remote Desktop</p>
                    <p><strong>VNC Password:</strong> VNC_PASSWORD_PLACEHOLDER</p>
                </div>
                
                <div>
                    <a href="/vnc.html?autoconnect=true&resize=scale" class="btn" target="_blank">üñ•Ô∏è Open Desktop</a>
                    <a href="/terminal" class="btn btn-success" target="_blank">üíª Terminal</a>
                </div>
                
                <div class="info-grid">
                    <div class="info-card">
                        <h3>üñ•Ô∏è Display</h3>
                        <p>Resolution: 1920x1080</p>
                        <p>VNC Port: 5900</p>
                        <p>Web Port: 6080</p>
                    </div>
                    <div class="info-card">
                        <h3>üì± Apps</h3>
                        <p>‚Ä¢ Firefox Browser</p>
                        <p>‚Ä¢ VS Code</p>
                        <p>‚Ä¢ Terminal</p>
                        <p>‚Ä¢ Finder</p>
                    </div>
                    <div class="info-card">
                        <h3>‚ö° System</h3>
                        <p>macOS 14.7.6</p>
                        <p>ARM64 (Apple Silicon)</p>
                        <p>7GB RAM, 3 CPU cores</p>
                    </div>
                </div>
                
                <iframe class="desktop-frame" src="/vnc.html?autoconnect=true&resize=scale"></iframe>
            </div>
        </body>
        </html>
        HTMLEOF
        
        # Replace password placeholder
        sed -i '' "s/VNC_PASSWORD_PLACEHOLDER/${{ github.event.inputs.vnc_password }}/g" /tmp/noVNC/index.html
        
        echo "‚úÖ Web interface created"
        
    - name: Setup Web Terminal
      run: |
        echo "üíª Setting up web terminal..."
        brew install ttyd
        ttyd --port 8080 --writable /bin/bash > /tmp/ttyd.log 2>&1 &
        echo "‚úÖ Web terminal started on port 8080"
        
    - name: Setup Nginx Proxy
      run: |
        echo "üîÑ Setting up nginx..."
        brew install nginx
        
        cat > /tmp/nginx.conf << 'NGINXEOF'
        events { worker_connections 1024; }
        http {
            include /opt/homebrew/etc/nginx/mime.types;
            default_type application/octet-stream;
            
            server {
                listen 8090;
                
                location / {
                    proxy_pass http://127.0.0.1:6080/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                }
                
                location /websockify {
                    proxy_pass http://127.0.0.1:6080/websockify;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                }
                
                location /terminal {
                    proxy_pass http://127.0.0.1:8080/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                }
            }
        }
        NGINXEOF
        
        nginx -c /tmp/nginx.conf > /tmp/nginx.log 2>&1 &
        echo "‚úÖ Nginx started on port 8090"
        
    - name: Setup Public Tunnels
      run: |
        echo "üöÄ Setting up public access..."
        
        # Cloudflare tunnel
        brew install cloudflared
        cloudflared tunnel --url http://localhost:8090 > /tmp/cloudflare.log 2>&1 &
        sleep 20
        
        CF_URL=$(grep -o 'https://[^[:space:]]*\.trycloudflare\.com' /tmp/cloudflare.log | head -1)
        if [ ! -z "$CF_URL" ]; then
            echo "$CF_URL" > /tmp/cloudflare_url.txt
        fi
        
        # Localtunnel
        npx localtunnel --port 8090 --subdomain macos-desktop-$(date +%s) > /tmp/localtunnel.log 2>&1 &
        sleep 10
        
        LT_URL=$(grep -o 'https://[^[:space:]]*' /tmp/localtunnel.log | head -1)
        if [ ! -z "$LT_URL" ]; then
            echo "$LT_URL" > /tmp/localtunnel_url.txt
        fi
        
    - name: Display Access Information
      run: |
        echo ""
        echo "üéâ macOS Desktop Environment Ready!"
        echo ""
        echo "üìä Service Status:"
        echo "‚Ä¢ VNC Server: $(pgrep -f ARDAgent > /dev/null && echo '‚úÖ Running' || echo '‚ùå Not running')"
        echo "‚Ä¢ noVNC Web: $(pgrep -f websockify > /dev/null && echo '‚úÖ Running' || echo '‚ùå Not running')"
        echo "‚Ä¢ Web Terminal: $(pgrep ttyd > /dev/null && echo '‚úÖ Running' || echo '‚ùå Not running')"
        echo "‚Ä¢ Nginx Proxy: $(pgrep nginx > /dev/null && echo '‚úÖ Running' || echo '‚ùå Not running')"
        echo ""
        echo "üåê Access URLs:"
        
        if [ -f /tmp/cloudflare_url.txt ]; then
            CF_URL=$(cat /tmp/cloudflare_url.txt)
            echo "ü•á Cloudflare: $CF_URL"
            echo "   üîê VNC Password: ${{ github.event.inputs.vnc_password }}"
        fi
        
        if [ -f /tmp/localtunnel_url.txt ]; then
            LT_URL=$(cat /tmp/localtunnel_url.txt)
            echo "ü•à Localtunnel: $LT_URL"
            echo "   üîë Tunnel Password: $PUBLIC_IP"
            echo "   üîê VNC Password: ${{ github.event.inputs.vnc_password }}"
        fi
        
        echo ""
        echo "üí° Usage: Open URL ‚Üí Click 'Open Desktop' ‚Üí Enter VNC password"
        
    - name: Keep Services Running
      run: |
        echo "‚è∞ Keeping services alive for 6 hours..."
        
        while true; do
            # Check and restart services if needed
            if ! pgrep -f websockify > /dev/null; then
                echo "üîÑ Restarting noVNC..."
                cd /tmp/websockify
                python3 websockify.py --web /tmp/noVNC 6080 localhost:5900 > /tmp/websockify.log 2>&1 &
            fi
            
            if ! pgrep ttyd > /dev/null; then
                echo "üîÑ Restarting terminal..."
                ttyd --port 8080 --writable /bin/bash > /tmp/ttyd.log 2>&1 &
            fi
            
            if ! pgrep nginx > /dev/null; then
                echo "üîÑ Restarting nginx..."
                nginx -c /tmp/nginx.conf > /tmp/nginx.log 2>&1 &
            fi
            
            echo "$(date): ‚úÖ All services running"
            sleep 300
        done
