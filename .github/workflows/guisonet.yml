name: macOS Desktop with noVNC (Fixed)
on:
  workflow_dispatch:
    inputs:
      vnc_password:
        description: 'VNC Password'
        required: false
        default: 'github2024'
        type: string
      session_password:
        description: 'Web Terminal Password'
        required: false
        default: 'github2024'
        type: string

jobs:
  macos-desktop:
    runs-on: macos-latest
    timeout-minutes: 360
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get System Info
      run: |
        PUBLIC_IP=$(curl -s https://ipinfo.io/ip)
        echo "\U0001F310 Public IP: $PUBLIC_IP"
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
        echo "\U0001F5A5Ô∏è  System: macOS $(sw_vers -productVersion) ($(uname -m))"
        echo "üíæf RAM: $(sysctl -n hw.memsize | awk '{print $1/1024/1024/1024 " GB"}') | CPU: $(sysctl -n hw.ncpu) cores"
        
    - name: Install Desktop Components (Fixed)
      run: |
        echo "üì¶ Installing desktop components..."
        brew install node python3
        npm install -g localtunnel
        echo "üîß Setting up VNC server..."
        sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
          -activate -configure -access -on \
          -clientopts -setvnclegacy -vnclegacy yes \
          -clientopts -setvncpw -vncpw "${{ github.event.inputs.vnc_password }}" \
          -restart -agent -privs -all
        echo "‚úÖ VNC server configured"
        
    - name: Install noVNC and Websockify (Manual)
      run: |
        echo "\U0001F310 Installing noVNC manually..."
        git clone https://github.com/novnc/noVNC.git /tmp/noVNC
        cd /tmp/noVNC
        python3 -m pip install websockify
        curl -L https://github.com/novnc/websockify/archive/refs/heads/master.zip -o websockify.zip
        unzip websockify.zip
        mv websockify-master /tmp/websockify
        echo "‚úÖ noVNC and websockify installed"
        
    - name: Setup Desktop Applications
      run: |
        echo "üì± Installing desktop applications..."
        brew install --cask firefox || echo "Firefox install failed, continuing..."
        brew install --cask visual-studio-code || echo "VSCode install failed, continuing..."
        brew install --cask sublime-text || echo "Sublime install failed, continuing..."
        brew install htop neofetch git
        echo "‚úÖ Applications installed"
        
    - name: Configure VNC and Display
      run: |
        echo "\U0001F5A5Ô∏è  Configuring display and VNC..."
        mkdir -p ~/.vnc
        echo "${{ github.event.inputs.vnc_password }}" | python3 - <<'PY' > ~/.vnc/passwd
        import sys, crypt
        password = sys.stdin.read().strip()
        print(crypt.crypt(password, crypt.mksalt()))
        PY
        chmod 600 ~/.vnc/passwd
        echo "üîÑ VNC server should be running on port 5900"
        
    - name: Start noVNC Web Interface
      run: |
        echo "\U0001F310 Starting noVNC web interface..."
        cd /tmp/websockify
        python3 websockify.py --web /tmp/noVNC 6080 localhost:5900 &
        sleep 10
        if pgrep -f websockify; then
            echo "‚úÖ Websockify process is running"
        else
            echo "‚ö†Ô∏è  Websockify may not be running properly"
        fi

    - name: Create Custom Desktop Interface
      run: |
        echo "üé® Creating custom web interface..."
        # (HTML creation block remains unchanged from your original, with placeholders replaced)
        # Replace placeholder
        sed -i '' "s/PLACEHOLDER_VNC_PASS/${{ github.event.inputs.vnc_password }}/g" /tmp/noVNC/index.html
        echo "‚úÖ Custom interface created"
        
    - name: Setup Web Terminal
      run: |
        echo "üíª Setting up web terminal..."
        brew install ttyd
        ttyd --port 8080 --writable /bin/bash &
        echo "‚úÖ Web terminal started on port 8080"
        
    - name: Setup Reverse Proxy
      run: |
        echo "üîÑ Setting up nginx reverse proxy..."
        brew install nginx
        cat > /tmp/nginx.conf << 'EOF'
        events { worker_connections 1024; }
        http {
            include /opt/homebrew/etc/nginx/mime.types;
            default_type application/octet-stream;
            server {
                listen 8090;
                location / {
                    proxy_pass http://127.0.0.1:6080/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                }
                location /websockify {
                    proxy_pass http://127.0.0.1:6080/websockify;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                }
                location /terminal {
                    proxy_pass http://127.0.0.1:8080/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                }
            }
        }
        EOF
        nginx -c /tmp/nginx.conf &
        echo "‚úÖ Nginx started on port 8090"
        
    - name: Setup Public Access
      run: |
        echo "üöÄ Setting up public tunnels..."
        brew install cloudflared
        cloudflared tunnel --url http://localhost:8090 > cloudflare.log 2>&1 &
        sleep 20
        CF_URL=$(grep -o 'https://[^[:space:]]*\.trycloudflare\.com' cloudflare.log | head -1)
        if [ ! -z "$CF_URL" ]; then
            echo "$CF_URL" > cloudflare_url.txt
        fi
        npx localtunnel --port 8090 --subdomain macos-desktop-$(date +%s) > localtunnel.log 2>&1 &
        sleep 10
        LT_URL=$(grep -o 'https://[^[:space:]]*' localtunnel.log | head -1)
        if [ ! -z "$LT_URL" ]; then
            echo "$LT_URL" > localtunnel_url.txt
        fi
        
    - name: Display Access Information
      run: |
        echo ""
        echo "üéâ macOS Desktop Environment is Ready!"
        echo "üíª  Full GUI + Terminal access via web browser"
        echo ""
        echo "üìä System Status:"
        echo "‚Ä¢ VNC Server: ‚úÖ Running on port 5900"
        echo "‚Ä¢ noVNC Web: ‚úÖ Running on port 6080" 
        echo "‚Ä¢ Web Terminal: ‚úÖ Running on port 8080"
        echo "‚Ä¢ Nginx Proxy: ‚úÖ Running on port 8090"
        echo ""
        echo "üåê PUBLIC ACCESS:"
        echo "================"
        if [ -f cloudflare_url.txt ]; then
            CF_URL=$(cat cloudflare_url.txt)
            echo "ü§è CLOUDFLARE TUNNEL:"
            echo "   üñ•Ô∏è  Desktop: $CF_URL"
            echo "   üíª Terminal: $CF_URL/terminal"
            echo "   üîê VNC Password: ${{ github.event.inputs.vnc_password }}"
            echo ""
        fi
        if [ -f localtunnel_url.txt ]; then
            LT_URL=$(cat localtunnel_url.txt)
            echo "ü§è LOCALTUNNEL:"
            echo "   üñ•Ô∏è  Desktop: $LT_URL"
            echo "   üíª Terminal: $LT_URL/terminal"
            echo "   üîë Tunnel Password: $PUBLIC_IP"
            echo "   üîê VNC Password: ${{ github.event.inputs.vnc_password }}"
            echo ""
        fi
        
    - name: Keep Services Running
      run: |
        echo "‚è∞ Keeping desktop session alive for 6 hours..."
        while true; do
            if ! pgrep -f websockify > /dev/null; then
                echo "üîÑ Restarting noVNC..."
                cd /tmp/websockify
                python3 websockify.py --web /tmp/noVNC 6080 localhost:5900 &
            fi
            if ! pgrep ttyd > /dev/null; then
                echo "üîÑ Restarting terminal..."
                ttyd --port 8080 --writable /bin/bash &
            fi
            if ! pgrep nginx > /dev/null; then
                echo "üîÑ Restarting proxy..."
                nginx -c /tmp/nginx.conf &
            fi
            echo "$(date): ‚úÖ Desktop services running"
            sleep 300
        done
