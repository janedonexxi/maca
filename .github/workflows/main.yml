name: macOS Web SSH Access (Fixed) Sonnet
on:
  workflow_dispatch:
    inputs:
      session_password:
        description: 'Web Terminal Password'
        required: false
        default: 'github2024'
        type: string

jobs:
  macos-web-ssh:
    runs-on: macos-latest
    timeout-minutes: 360
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get Public IP and Setup
      run: |
        # Get public IP address
        PUBLIC_IP=$(curl -s https://ipinfo.io/ip)
        echo "🌐 Public IP: $PUBLIC_IP"
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
        
        # Install required packages
        brew install ttyd node
        npm install -g localtunnel
        
    - name: Start Web Terminal
      run: |
        # Start ttyd web terminal
        ttyd \
          --port 8080 \
          --credential "admin:${{ github.event.inputs.session_password }}" \
          /bin/bash &
        
        echo "🌐 Web terminal started on port 8080"
        sleep 5
        
    - name: Setup Public Tunnel with IP Password
      run: |
        # Start localtunnel with custom subdomain
        echo "🚀 Creating public tunnel..."
        
        # Use public IP as tunnel password
        npx localtunnel --port 8080 --subdomain github-macos-$(date +%s) > tunnel.log 2>&1 &
        
        sleep 15
        
        # Extract tunnel URL
        TUNNEL_URL=$(grep -o 'https://[^[:space:]]*' tunnel.log | head -1)
        
        if [ -z "$TUNNEL_URL" ]; then
            # Fallback without subdomain
            pkill -f localtunnel
            npx localtunnel --port 8080 > tunnel.log 2>&1 &
            sleep 15
            TUNNEL_URL=$(grep -o 'https://[^[:space:]]*' tunnel.log | head -1)
        fi
        
        echo "🌍 Tunnel URL: $TUNNEL_URL"
        echo "$TUNNEL_URL" > public_url.txt
        
    - name: Display Complete Access Information
      run: |
        echo "🎉 macOS Web Terminal is ready!"
        echo ""
        echo "🔗 Access Steps:"
        echo "1. Open this URL in your browser:"
        
        if [ -f public_url.txt ]; then
            PUBLIC_URL=$(cat public_url.txt)
            echo "   $PUBLIC_URL"
            echo ""
            echo "2. 🔐 Localtunnel Security Page:"
            echo "   Tunnel Password: $PUBLIC_IP"
            echo "   (This is the runner's public IP address)"
            echo ""
            echo "3. 🖥️ Web Terminal Login:"
            echo "   Username: admin"
            echo "   Password: ${{ github.event.inputs.session_password }}"
            echo ""
            echo "4. 📱 Direct Terminal Access (after tunnel auth):"
            echo "   $PUBLIC_URL/terminal"
        else
            echo "   ❌ Failed to create public tunnel"
        fi
        
        echo ""
        echo "⚡ System Information:"
        echo "   OS: macOS $(sw_vers -productVersion)"
        echo "   Architecture: $(uname -m)"
        echo "   Public IP: $PUBLIC_IP"
        echo "   RAM: $(sysctl -n hw.memsize | awk '{print $1/1024/1024/1024 " GB"}')"
        echo "   CPU: $(sysctl -n hw.ncpu) cores"
        
    - name: Alternative: Use serveo.net (No IP required)
      run: |
        echo ""
        echo "🔄 Alternative Access Method (No IP password needed):"
        echo "Setting up serveo.net tunnel..."
        
        # Kill existing localtunnel
        pkill -f localtunnel || true
        
        # Use serveo.net as alternative
        ssh -o StrictHostKeyChecking=no -R 80:localhost:8080 serveo.net > serveo.log 2>&1 &
        
        sleep 10
        
        # Extract serveo URL
        SERVEO_URL=$(grep -o 'https://[^[:space:]]*\.serveo\.net' serveo.log | head -1)
        
        if [ ! -z "$SERVEO_URL" ]; then
            echo "🌟 Alternative URL (No password needed): $SERVEO_URL"
            echo "🖥️ Direct terminal: $SERVEO_URL/terminal"
            echo ""
            echo "✅ This URL works immediately without any password!"
        fi
        
    - name: Keep Session Alive
      run: |
        echo "⏰ Session will remain active for up to 6 hours"
        echo "💡 Use 'sudo shutdown -h now' to terminate early"
        echo ""
        
        while true; do
            # Keep ttyd running
            if ! pgrep ttyd > /dev/null; then
                echo "🔄 Restarting web terminal..."
                ttyd --port 8080 --credential "admin:${{ github.event.inputs.session_password }}" /bin/bash &
            fi
            
            echo "$(date): ✅ Services running - IP: $PUBLIC_IP"
            sleep 300
        done
