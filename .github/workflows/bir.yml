name: macOS Web SSH Access (Fixed) sonet
on:
  workflow_dispatch:
    inputs:
      session_password:
        description: 'Web Terminal Password'
        required: false
        default: 'github2024'
        type: string

jobs:
  macos-web-ssh:
    runs-on: macos-latest
    timeout-minutes: 360
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get Public IP and Setup Tools
      run: |
        PUBLIC_IP=$(curl -s https://ipinfo.io/ip)
        echo "üåê Runner Public IP: $PUBLIC_IP"
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
        
        # Install packages
        brew install ttyd node
        npm install -g localtunnel
        
    - name: Start Web Terminal (No Auth for Tunnels)
      run: |
        # Start ttyd WITHOUT credential requirement for tunnel compatibility
        ttyd --port 8080 --writable /bin/bash &
        
        echo "üåê Web terminal started on port 8080 (no auth required)"
        sleep 5
        
    - name: Create Custom Auth Page
      run: |
        # Create a simple auth wrapper
        mkdir -p /tmp/webauth
        
        cat > /tmp/webauth/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>macOS Terminal Access</title>
            <style>
                body { 
                    font-family: monospace; 
                    background: #1e1e1e; 
                    color: #fff; 
                    padding: 20px;
                    text-align: center;
                }
                .login-box {
                    background: #2d2d2d;
                    padding: 30px;
                    border-radius: 10px;
                    max-width: 400px;
                    margin: 50px auto;
                }
                input {
                    width: 100%;
                    padding: 10px;
                    margin: 10px 0;
                    background: #333;
                    border: 1px solid #555;
                    color: #fff;
                    border-radius: 5px;
                }
                button {
                    width: 100%;
                    padding: 12px;
                    background: #0066cc;
                    color: white;
                    border: none;
                    border-radius: 5px;
                    cursor: pointer;
                    font-size: 16px;
                }
                button:hover { background: #0052a3; }
                .terminal-link {
                    display: none;
                    background: #28a745;
                    padding: 15px;
                    border-radius: 5px;
                    margin-top: 20px;
                }
                .terminal-link a {
                    color: white;
                    text-decoration: none;
                    font-weight: bold;
                }
            </style>
        </head>
        <body>
            <div class="login-box">
                <h2>üçé macOS Terminal Access</h2>
                <div id="login-form">
                    <input type="text" id="username" placeholder="Username" value="admin">
                    <input type="password" id="password" placeholder="Password">
                    <button onclick="authenticate()">Access Terminal</button>
                </div>
                <div id="terminal-link" class="terminal-link">
                    <p>‚úÖ Authentication successful!</p>
                    <a href="/terminal" target="_blank">üñ•Ô∏è Open Terminal</a>
                </div>
            </div>
            
            <script>
                function authenticate() {
                    const username = document.getElementById('username').value;
                    const password = document.getElementById('password').value;
                    
                    if (username === 'admin' && password === 'PLACEHOLDER_PASSWORD') {
                        document.getElementById('login-form').style.display = 'none';
                        document.getElementById('terminal-link').style.display = 'block';
                    } else {
                        alert('Invalid credentials!');
                    }
                }
            </script>
        </body>
        </html>
        EOF
        
        # Replace placeholder with actual password
        sed -i '' "s/PLACEHOLDER_PASSWORD/${{ github.event.inputs.session_password }}/g" /tmp/webauth/index.html
        
        # Start simple HTTP server for auth page
        cd /tmp/webauth
        python3 -m http.server 8081 &
        
        echo "üîê Auth page started on port 8081"
        
    - name: Setup Nginx Proxy (Better Solution)
      run: |
        # Install nginx
        brew install nginx
        
        # Create nginx config
        cat > /tmp/nginx.conf << 'EOF'
        events {
            worker_connections 1024;
        }
        
        http {
            server {
                listen 8082;
                
                # Serve auth page at root
                location = / {
                    proxy_pass http://127.0.0.1:8081/;
                }
                
                # Serve static files for auth
                location /index.html {
                    proxy_pass http://127.0.0.1:8081/index.html;
                }
                
                # Proxy terminal requests
                location /terminal {
                    proxy_pass http://127.0.0.1:8080/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
        }
        EOF
        
        # Start nginx
        nginx -c /tmp/nginx.conf &
        
        echo "üîÑ Nginx proxy started on port 8082"
        sleep 3
        
    - name: Setup Tunnels for Nginx Proxy
      run: |
        echo "üöÄ Setting up tunnels for port 8082..."
        
        # Cloudflare tunnel
        brew install cloudflared
        cloudflared tunnel --url http://localhost:8082 > cloudflare.log 2>&1 &
        sleep 15
        
        CF_URL=$(grep -o 'https://[^[:space:]]*\.trycloudflare\.com' cloudflare.log | head -1)
        if [ ! -z "$CF_URL" ]; then
            echo "$CF_URL" > cloudflare_url.txt
        fi
        
        # Localtunnel
        npx localtunnel --port 8082 --subdomain github-macos-$(date +%s) > localtunnel.log 2>&1 &
        sleep 10
        
        LT_URL=$(grep -o 'https://[^[:space:]]*' localtunnel.log | head -1)
        if [ ! -z "$LT_URL" ]; then
            echo "$LT_URL" > localtunnel_url.txt
        fi
        
        # Bore tunnel
        if brew install bore-cli 2>/dev/null; then
            bore local 8082 --to bore.pub > bore.log 2>&1 &
            sleep 10
            
            BORE_URL=$(grep -o 'bore\.pub:[0-9]*' bore.log | head -1)
            if [ ! -z "$BORE_URL" ]; then
                echo "http://$BORE_URL" > bore_url.txt
            fi
        fi
        
    - name: Display Fixed Access Methods
      run: |
        echo ""
        echo "üéâ macOS Web Terminal is ready! (FIXED VERSION)"
        echo "‚ö° System: macOS $(sw_vers -productVersion) ($(uname -m))"
        echo "üíæ RAM: $(sysctl -n hw.memsize | awk '{print $1/1024/1024/1024 " GB"}') | CPU: $(sysctl -n hw.ncpu) cores"
        echo ""
        echo "üîó WORKING ACCESS METHODS:"
        echo "=========================="
        
        if [ -f cloudflare_url.txt ]; then
            CF_URL=$(cat cloudflare_url.txt)
            echo "ü•á METHOD 1 - Cloudflare (RECOMMENDED):"
            echo "   URL: $CF_URL"
            echo "   üë§ Login: admin / ${{ github.event.inputs.session_password }}"
            echo "   üñ•Ô∏è  Click 'Open Terminal' after login"
            echo ""
        fi
        
        if [ -f bore_url.txt ]; then
            BORE_URL=$(cat bore_url.txt)
            echo "ü•à METHOD 2 - Bore.pub:"
            echo "   URL: $BORE_URL"
            echo "   üë§ Login: admin / ${{ github.event.inputs.session_password }}"
            echo "   üñ•Ô∏è  Click 'Open Terminal' after login"
            echo ""
        fi
        
        if [ -f localtunnel_url.txt ]; then
            LT_URL=$(cat localtunnel_url.txt)
            echo "ü•â METHOD 3 - Localtunnel:"
            echo "   URL: $LT_URL"
            echo "   üîë Tunnel Password: $PUBLIC_IP"
            echo "   üë§ Login: admin / ${{ github.event.inputs.session_password }}"
            echo "   üñ•Ô∏è  Click 'Open Terminal' after login"
            echo ""
        fi
        
        echo "‚úÖ FIXES APPLIED:"
        echo "‚Ä¢ Removed ttyd authentication conflicts"
        echo "‚Ä¢ Added nginx proxy for better routing"
        echo "‚Ä¢ Custom auth page with proper terminal links"
        echo "‚Ä¢ Fixed keyboard input issues"
        
    - name: Keep Session Alive
      run: |
        echo "‚è∞ Session active for 6 hours | Auto-monitoring enabled"
        
        while true; do
            # Monitor services
            if ! pgrep ttyd > /dev/null; then
                ttyd --port 8080 --writable /bin/bash &
            fi
            
            if ! pgrep nginx > /dev/null; then
                nginx -c /tmp/nginx.conf &
            fi
            
            echo "$(date): ‚úÖ All services running"
            sleep 300
        done
